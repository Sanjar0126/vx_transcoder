// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package content_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MovieSeasonServiceClient is the client API for MovieSeasonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieSeasonServiceClient interface {
	Get(ctx context.Context, in *MovieSeasonGetRequest, opts ...grpc.CallOption) (*MovieSeasonGetResponse, error)
	GetAll(ctx context.Context, in *MovieSeasonGetAllRequest, opts ...grpc.CallOption) (*MovieSeasonGetAllResponse, error)
	Create(ctx context.Context, in *MovieSeasonCreateRequest, opts ...grpc.CallOption) (*MovieSeasonCreateResponse, error)
	Delete(ctx context.Context, in *MovieSeasonDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Update(ctx context.Context, in *MovieSeasonUpdatePayload, opts ...grpc.CallOption) (*empty.Empty, error)
	AddEpisode(ctx context.Context, in *MovieEpisodesAddRequest, opts ...grpc.CallOption) (*MovieEpisodeAddResponse, error)
	GetEpisode(ctx context.Context, in *MovieEpisodeGetRequest, opts ...grpc.CallOption) (*MovieEpisodes, error)
	RemoveEpisode(ctx context.Context, in *MovieEpisodeRemoveRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetEpisodeAdmin(ctx context.Context, in *MovieSeasonGetRequest, opts ...grpc.CallOption) (*MovieEpisodes, error)
	GetAllSeasonEpisodes(ctx context.Context, in *MovieSeasonEpisodesFilter, opts ...grpc.CallOption) (*MovieSeasonEpisodesResponse, error)
	UpdateEpisode(ctx context.Context, in *MovieEpisodeUpdatePayload, opts ...grpc.CallOption) (*empty.Empty, error)
}

type movieSeasonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieSeasonServiceClient(cc grpc.ClientConnInterface) MovieSeasonServiceClient {
	return &movieSeasonServiceClient{cc}
}

func (c *movieSeasonServiceClient) Get(ctx context.Context, in *MovieSeasonGetRequest, opts ...grpc.CallOption) (*MovieSeasonGetResponse, error) {
	out := new(MovieSeasonGetResponse)
	err := c.cc.Invoke(ctx, "/content.MovieSeasonService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSeasonServiceClient) GetAll(ctx context.Context, in *MovieSeasonGetAllRequest, opts ...grpc.CallOption) (*MovieSeasonGetAllResponse, error) {
	out := new(MovieSeasonGetAllResponse)
	err := c.cc.Invoke(ctx, "/content.MovieSeasonService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSeasonServiceClient) Create(ctx context.Context, in *MovieSeasonCreateRequest, opts ...grpc.CallOption) (*MovieSeasonCreateResponse, error) {
	out := new(MovieSeasonCreateResponse)
	err := c.cc.Invoke(ctx, "/content.MovieSeasonService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSeasonServiceClient) Delete(ctx context.Context, in *MovieSeasonDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/content.MovieSeasonService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSeasonServiceClient) Update(ctx context.Context, in *MovieSeasonUpdatePayload, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/content.MovieSeasonService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSeasonServiceClient) AddEpisode(ctx context.Context, in *MovieEpisodesAddRequest, opts ...grpc.CallOption) (*MovieEpisodeAddResponse, error) {
	out := new(MovieEpisodeAddResponse)
	err := c.cc.Invoke(ctx, "/content.MovieSeasonService/AddEpisode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSeasonServiceClient) GetEpisode(ctx context.Context, in *MovieEpisodeGetRequest, opts ...grpc.CallOption) (*MovieEpisodes, error) {
	out := new(MovieEpisodes)
	err := c.cc.Invoke(ctx, "/content.MovieSeasonService/GetEpisode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSeasonServiceClient) RemoveEpisode(ctx context.Context, in *MovieEpisodeRemoveRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/content.MovieSeasonService/RemoveEpisode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSeasonServiceClient) GetEpisodeAdmin(ctx context.Context, in *MovieSeasonGetRequest, opts ...grpc.CallOption) (*MovieEpisodes, error) {
	out := new(MovieEpisodes)
	err := c.cc.Invoke(ctx, "/content.MovieSeasonService/GetEpisodeAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSeasonServiceClient) GetAllSeasonEpisodes(ctx context.Context, in *MovieSeasonEpisodesFilter, opts ...grpc.CallOption) (*MovieSeasonEpisodesResponse, error) {
	out := new(MovieSeasonEpisodesResponse)
	err := c.cc.Invoke(ctx, "/content.MovieSeasonService/GetAllSeasonEpisodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSeasonServiceClient) UpdateEpisode(ctx context.Context, in *MovieEpisodeUpdatePayload, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/content.MovieSeasonService/UpdateEpisode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieSeasonServiceServer is the server API for MovieSeasonService service.
// All implementations must embed UnimplementedMovieSeasonServiceServer
// for forward compatibility
type MovieSeasonServiceServer interface {
	Get(context.Context, *MovieSeasonGetRequest) (*MovieSeasonGetResponse, error)
	GetAll(context.Context, *MovieSeasonGetAllRequest) (*MovieSeasonGetAllResponse, error)
	Create(context.Context, *MovieSeasonCreateRequest) (*MovieSeasonCreateResponse, error)
	Delete(context.Context, *MovieSeasonDeleteRequest) (*empty.Empty, error)
	Update(context.Context, *MovieSeasonUpdatePayload) (*empty.Empty, error)
	AddEpisode(context.Context, *MovieEpisodesAddRequest) (*MovieEpisodeAddResponse, error)
	GetEpisode(context.Context, *MovieEpisodeGetRequest) (*MovieEpisodes, error)
	RemoveEpisode(context.Context, *MovieEpisodeRemoveRequest) (*empty.Empty, error)
	GetEpisodeAdmin(context.Context, *MovieSeasonGetRequest) (*MovieEpisodes, error)
	GetAllSeasonEpisodes(context.Context, *MovieSeasonEpisodesFilter) (*MovieSeasonEpisodesResponse, error)
	UpdateEpisode(context.Context, *MovieEpisodeUpdatePayload) (*empty.Empty, error)
	mustEmbedUnimplementedMovieSeasonServiceServer()
}

// UnimplementedMovieSeasonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMovieSeasonServiceServer struct {
}

func (UnimplementedMovieSeasonServiceServer) Get(context.Context, *MovieSeasonGetRequest) (*MovieSeasonGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMovieSeasonServiceServer) GetAll(context.Context, *MovieSeasonGetAllRequest) (*MovieSeasonGetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedMovieSeasonServiceServer) Create(context.Context, *MovieSeasonCreateRequest) (*MovieSeasonCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMovieSeasonServiceServer) Delete(context.Context, *MovieSeasonDeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMovieSeasonServiceServer) Update(context.Context, *MovieSeasonUpdatePayload) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMovieSeasonServiceServer) AddEpisode(context.Context, *MovieEpisodesAddRequest) (*MovieEpisodeAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEpisode not implemented")
}
func (UnimplementedMovieSeasonServiceServer) GetEpisode(context.Context, *MovieEpisodeGetRequest) (*MovieEpisodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEpisode not implemented")
}
func (UnimplementedMovieSeasonServiceServer) RemoveEpisode(context.Context, *MovieEpisodeRemoveRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEpisode not implemented")
}
func (UnimplementedMovieSeasonServiceServer) GetEpisodeAdmin(context.Context, *MovieSeasonGetRequest) (*MovieEpisodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEpisodeAdmin not implemented")
}
func (UnimplementedMovieSeasonServiceServer) GetAllSeasonEpisodes(context.Context, *MovieSeasonEpisodesFilter) (*MovieSeasonEpisodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSeasonEpisodes not implemented")
}
func (UnimplementedMovieSeasonServiceServer) UpdateEpisode(context.Context, *MovieEpisodeUpdatePayload) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEpisode not implemented")
}
func (UnimplementedMovieSeasonServiceServer) mustEmbedUnimplementedMovieSeasonServiceServer() {}

// UnsafeMovieSeasonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieSeasonServiceServer will
// result in compilation errors.
type UnsafeMovieSeasonServiceServer interface {
	mustEmbedUnimplementedMovieSeasonServiceServer()
}

func RegisterMovieSeasonServiceServer(s grpc.ServiceRegistrar, srv MovieSeasonServiceServer) {
	s.RegisterService(&MovieSeasonService_ServiceDesc, srv)
}

func _MovieSeasonService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieSeasonGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSeasonServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieSeasonService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSeasonServiceServer).Get(ctx, req.(*MovieSeasonGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSeasonService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieSeasonGetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSeasonServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieSeasonService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSeasonServiceServer).GetAll(ctx, req.(*MovieSeasonGetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSeasonService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieSeasonCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSeasonServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieSeasonService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSeasonServiceServer).Create(ctx, req.(*MovieSeasonCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSeasonService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieSeasonDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSeasonServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieSeasonService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSeasonServiceServer).Delete(ctx, req.(*MovieSeasonDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSeasonService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieSeasonUpdatePayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSeasonServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieSeasonService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSeasonServiceServer).Update(ctx, req.(*MovieSeasonUpdatePayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSeasonService_AddEpisode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieEpisodesAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSeasonServiceServer).AddEpisode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieSeasonService/AddEpisode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSeasonServiceServer).AddEpisode(ctx, req.(*MovieEpisodesAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSeasonService_GetEpisode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieEpisodeGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSeasonServiceServer).GetEpisode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieSeasonService/GetEpisode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSeasonServiceServer).GetEpisode(ctx, req.(*MovieEpisodeGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSeasonService_RemoveEpisode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieEpisodeRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSeasonServiceServer).RemoveEpisode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieSeasonService/RemoveEpisode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSeasonServiceServer).RemoveEpisode(ctx, req.(*MovieEpisodeRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSeasonService_GetEpisodeAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieSeasonGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSeasonServiceServer).GetEpisodeAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieSeasonService/GetEpisodeAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSeasonServiceServer).GetEpisodeAdmin(ctx, req.(*MovieSeasonGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSeasonService_GetAllSeasonEpisodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieSeasonEpisodesFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSeasonServiceServer).GetAllSeasonEpisodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieSeasonService/GetAllSeasonEpisodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSeasonServiceServer).GetAllSeasonEpisodes(ctx, req.(*MovieSeasonEpisodesFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSeasonService_UpdateEpisode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieEpisodeUpdatePayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSeasonServiceServer).UpdateEpisode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieSeasonService/UpdateEpisode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSeasonServiceServer).UpdateEpisode(ctx, req.(*MovieEpisodeUpdatePayload))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieSeasonService_ServiceDesc is the grpc.ServiceDesc for MovieSeasonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieSeasonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "content.MovieSeasonService",
	HandlerType: (*MovieSeasonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _MovieSeasonService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _MovieSeasonService_GetAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _MovieSeasonService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MovieSeasonService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MovieSeasonService_Update_Handler,
		},
		{
			MethodName: "AddEpisode",
			Handler:    _MovieSeasonService_AddEpisode_Handler,
		},
		{
			MethodName: "GetEpisode",
			Handler:    _MovieSeasonService_GetEpisode_Handler,
		},
		{
			MethodName: "RemoveEpisode",
			Handler:    _MovieSeasonService_RemoveEpisode_Handler,
		},
		{
			MethodName: "GetEpisodeAdmin",
			Handler:    _MovieSeasonService_GetEpisodeAdmin_Handler,
		},
		{
			MethodName: "GetAllSeasonEpisodes",
			Handler:    _MovieSeasonService_GetAllSeasonEpisodes_Handler,
		},
		{
			MethodName: "UpdateEpisode",
			Handler:    _MovieSeasonService_UpdateEpisode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movie_season_service.proto",
}
