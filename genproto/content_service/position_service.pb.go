// Code generated by protoc-gen-go. DO NOT EDIT.
// source: position_service.proto

package content_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("position_service.proto", fileDescriptor_d5546d779581f29b) }

var fileDescriptor_d5546d779581f29b = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x86, 0x87, 0x42, 0x85, 0x20, 0x0a, 0xb9, 0x28, 0x92, 0x89, 0x83, 0x3d, 0x40, 0x0a, 0xfa,
	0x04, 0xeb, 0xd4, 0x5e, 0x78, 0xa1, 0x28, 0xde, 0x78, 0x23, 0xae, 0xfe, 0x96, 0x42, 0x9a, 0x13,
	0x9b, 0x33, 0xc1, 0xa7, 0xf6, 0x15, 0x64, 0x4d, 0x33, 0x06, 0x46, 0x76, 0x79, 0xce, 0xf7, 0xe7,
	0xe3, 0xfc, 0x44, 0xe4, 0x8e, 0x7c, 0xcb, 0x2d, 0xd9, 0x57, 0x8f, 0xfe, 0xab, 0xad, 0xa1, 0x5d,
	0x4f, 0x4c, 0xf2, 0xa8, 0x26, 0xcb, 0xb0, 0xac, 0x4e, 0x62, 0x20, 0x00, 0x75, 0x5c, 0x53, 0xd7,
	0x6d, 0xa7, 0x69, 0x43, 0xd4, 0x18, 0x14, 0xc3, 0xb4, 0x5a, 0x7f, 0x14, 0xe8, 0x1c, 0x7f, 0x07,
	0x78, 0xf9, 0x73, 0x20, 0x4e, 0x1f, 0xc6, 0xd7, 0x4f, 0xc1, 0x2e, 0x4b, 0x71, 0x58, 0x81, 0xe5,
	0x54, 0x8f, 0x7e, 0x1d, 0x03, 0x15, 0xf8, 0x11, 0x9f, 0x6b, 0x78, 0x56, 0xe7, 0x69, 0xe8, 0x1d,
	0x59, 0x8f, 0xf9, 0x44, 0x2e, 0x45, 0x56, 0x81, 0x17, 0xc6, 0xc8, 0x7c, 0x9b, 0xbc, 0x6d, 0x0d,
	0xa3, 0xbf, 0x77, 0x9b, 0xb4, 0x57, 0xb3, 0x94, 0x61, 0x61, 0xcc, 0x8e, 0xa4, 0x14, 0xd9, 0xb3,
	0x7b, 0x7f, 0x63, 0xc8, 0x8b, 0x3f, 0xe1, 0x00, 0xe2, 0x39, 0xb9, 0x0e, 0x25, 0x75, 0x2c, 0xa9,
	0x6f, 0x36, 0x25, 0xe7, 0x13, 0x79, 0x27, 0xb2, 0x65, 0x8f, 0xb4, 0x23, 0x80, 0xe8, 0x98, 0xfd,
	0xcb, 0x77, 0x0f, 0xba, 0x86, 0x41, 0x52, 0x16, 0xc0, 0xde, 0x83, 0x4a, 0xf5, 0x72, 0xd6, 0xc0,
	0x0e, 0xeb, 0x62, 0x74, 0xc4, 0x7f, 0x5d, 0x65, 0xc3, 0xfa, 0xea, 0x37, 0x00, 0x00, 0xff, 0xff,
	0xd1, 0x30, 0xad, 0xe3, 0xf2, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PositionServiceClient is the client API for PositionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PositionServiceClient interface {
	Get(ctx context.Context, in *PositionGetRequest, opts ...grpc.CallOption) (*PositionGetResponse, error)
	GetAll(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*PositionGetAllResponse, error)
	Update(ctx context.Context, in *PositionUpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Create(ctx context.Context, in *PositionCreateRequest, opts ...grpc.CallOption) (*PositionCreateResponse, error)
	Delete(ctx context.Context, in *PositionDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type positionServiceClient struct {
	cc *grpc.ClientConn
}

func NewPositionServiceClient(cc *grpc.ClientConn) PositionServiceClient {
	return &positionServiceClient{cc}
}

func (c *positionServiceClient) Get(ctx context.Context, in *PositionGetRequest, opts ...grpc.CallOption) (*PositionGetResponse, error) {
	out := new(PositionGetResponse)
	err := c.cc.Invoke(ctx, "/content.PositionService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionServiceClient) GetAll(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*PositionGetAllResponse, error) {
	out := new(PositionGetAllResponse)
	err := c.cc.Invoke(ctx, "/content.PositionService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionServiceClient) Update(ctx context.Context, in *PositionUpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/content.PositionService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionServiceClient) Create(ctx context.Context, in *PositionCreateRequest, opts ...grpc.CallOption) (*PositionCreateResponse, error) {
	out := new(PositionCreateResponse)
	err := c.cc.Invoke(ctx, "/content.PositionService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionServiceClient) Delete(ctx context.Context, in *PositionDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/content.PositionService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PositionServiceServer is the server API for PositionService service.
type PositionServiceServer interface {
	Get(context.Context, *PositionGetRequest) (*PositionGetResponse, error)
	GetAll(context.Context, *FilterOptions) (*PositionGetAllResponse, error)
	Update(context.Context, *PositionUpdateRequest) (*empty.Empty, error)
	Create(context.Context, *PositionCreateRequest) (*PositionCreateResponse, error)
	Delete(context.Context, *PositionDeleteRequest) (*empty.Empty, error)
}

// UnimplementedPositionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPositionServiceServer struct {
}

func (*UnimplementedPositionServiceServer) Get(ctx context.Context, req *PositionGetRequest) (*PositionGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedPositionServiceServer) GetAll(ctx context.Context, req *FilterOptions) (*PositionGetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedPositionServiceServer) Update(ctx context.Context, req *PositionUpdateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedPositionServiceServer) Create(ctx context.Context, req *PositionCreateRequest) (*PositionCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedPositionServiceServer) Delete(ctx context.Context, req *PositionDeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterPositionServiceServer(s *grpc.Server, srv PositionServiceServer) {
	s.RegisterService(&_PositionService_serviceDesc, srv)
}

func _PositionService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.PositionService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionServiceServer).Get(ctx, req.(*PositionGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PositionService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.PositionService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionServiceServer).GetAll(ctx, req.(*FilterOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _PositionService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.PositionService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionServiceServer).Update(ctx, req.(*PositionUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PositionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.PositionService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionServiceServer).Create(ctx, req.(*PositionCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PositionService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.PositionService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionServiceServer).Delete(ctx, req.(*PositionDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PositionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "content.PositionService",
	HandlerType: (*PositionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _PositionService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _PositionService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PositionService_Update_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PositionService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PositionService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "position_service.proto",
}
