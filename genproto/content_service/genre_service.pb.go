// Code generated by protoc-gen-go. DO NOT EDIT.
// source: genre_service.proto

package content_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("genre_service.proto", fileDescriptor_4cc85494dd977ca8) }

var fileDescriptor_4cc85494dd977ca8 = []byte{
	// 247 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0x8b, 0xc2, 0x0a, 0xb1, 0xa7, 0x08, 0xa5, 0xa6, 0x3d, 0xf5, 0x01, 0xb2, 0xa0, 0x57,
	0x41, 0xab, 0xd6, 0x3d, 0x0a, 0x8a, 0x17, 0x2f, 0x62, 0xd7, 0xdf, 0x65, 0x21, 0x9b, 0x89, 0xc9,
	0x54, 0xf0, 0x49, 0x7d, 0x1d, 0x69, 0xb2, 0x91, 0x4a, 0x17, 0x3c, 0xe6, 0xfb, 0x67, 0x3e, 0xe6,
	0x27, 0xe2, 0xa4, 0x81, 0xf5, 0x78, 0x09, 0xf0, 0x9f, 0x6d, 0x0d, 0xed, 0x3c, 0x31, 0xc9, 0xa3,
	0x9a, 0x2c, 0xc3, 0xb2, 0x3a, 0x8e, 0x69, 0xa2, 0x6a, 0x5c, 0x53, 0xd7, 0x91, 0xed, 0x5f, 0xb3,
	0x86, 0xa8, 0x31, 0x28, 0xe3, 0x6b, 0xbd, 0x79, 0x2f, 0xd1, 0x39, 0xfe, 0x4a, 0xe1, 0xd9, 0xf7,
	0x81, 0x18, 0x57, 0xdb, 0xd5, 0xc7, 0xe4, 0x95, 0x17, 0xe2, 0xb0, 0x02, 0xcb, 0xa9, 0xee, 0xcd,
	0x3a, 0xa6, 0x15, 0xf8, 0x01, 0x1f, 0x1b, 0x04, 0x56, 0xa7, 0x03, 0x49, 0x70, 0x64, 0x03, 0x16,
	0x23, 0x79, 0x25, 0x8a, 0x0a, 0xbc, 0x34, 0x46, 0x4e, 0x7e, 0xc7, 0xee, 0x5a, 0xc3, 0xf0, 0xf7,
	0x8e, 0x5b, 0xb2, 0x41, 0xcd, 0xf7, 0xd6, 0x97, 0xc6, 0xec, 0x18, 0x2e, 0x45, 0xf1, 0xe4, 0xde,
	0x5e, 0x19, 0x72, 0xf6, 0x77, 0x32, 0xd1, 0x7c, 0xc5, 0x44, 0xa7, 0x56, 0x3a, 0xb7, 0xd2, 0xab,
	0x6d, 0xab, 0xc5, 0x48, 0xae, 0x44, 0x71, 0xe3, 0x31, 0x20, 0x48, 0x34, 0x0b, 0xe6, 0xc3, 0xe1,
	0xee, 0x1d, 0xb7, 0x30, 0xd8, 0xd7, 0x24, 0xfa, 0xef, 0x1d, 0xd7, 0xea, 0x79, 0xda, 0xc0, 0x46,
	0x5c, 0xf6, 0x82, 0xfc, 0x79, 0xeb, 0x22, 0xe2, 0xf3, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9b,
	0xe5, 0xd8, 0x61, 0xd4, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GenreServiceClient is the client API for GenreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GenreServiceClient interface {
	Get(ctx context.Context, in *GenreGetRequest, opts ...grpc.CallOption) (*GenreGetResponse, error)
	GetAll(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*GenreGetAllResponse, error)
	Update(ctx context.Context, in *GenreUpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Create(ctx context.Context, in *GenreCreateRequest, opts ...grpc.CallOption) (*GenreCreateResponse, error)
	Delete(ctx context.Context, in *GenreDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type genreServiceClient struct {
	cc *grpc.ClientConn
}

func NewGenreServiceClient(cc *grpc.ClientConn) GenreServiceClient {
	return &genreServiceClient{cc}
}

func (c *genreServiceClient) Get(ctx context.Context, in *GenreGetRequest, opts ...grpc.CallOption) (*GenreGetResponse, error) {
	out := new(GenreGetResponse)
	err := c.cc.Invoke(ctx, "/content.GenreService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genreServiceClient) GetAll(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*GenreGetAllResponse, error) {
	out := new(GenreGetAllResponse)
	err := c.cc.Invoke(ctx, "/content.GenreService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genreServiceClient) Update(ctx context.Context, in *GenreUpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/content.GenreService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genreServiceClient) Create(ctx context.Context, in *GenreCreateRequest, opts ...grpc.CallOption) (*GenreCreateResponse, error) {
	out := new(GenreCreateResponse)
	err := c.cc.Invoke(ctx, "/content.GenreService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genreServiceClient) Delete(ctx context.Context, in *GenreDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/content.GenreService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenreServiceServer is the server API for GenreService service.
type GenreServiceServer interface {
	Get(context.Context, *GenreGetRequest) (*GenreGetResponse, error)
	GetAll(context.Context, *FilterOptions) (*GenreGetAllResponse, error)
	Update(context.Context, *GenreUpdateRequest) (*empty.Empty, error)
	Create(context.Context, *GenreCreateRequest) (*GenreCreateResponse, error)
	Delete(context.Context, *GenreDeleteRequest) (*empty.Empty, error)
}

// UnimplementedGenreServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGenreServiceServer struct {
}

func (*UnimplementedGenreServiceServer) Get(ctx context.Context, req *GenreGetRequest) (*GenreGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedGenreServiceServer) GetAll(ctx context.Context, req *FilterOptions) (*GenreGetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedGenreServiceServer) Update(ctx context.Context, req *GenreUpdateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedGenreServiceServer) Create(ctx context.Context, req *GenreCreateRequest) (*GenreCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedGenreServiceServer) Delete(ctx context.Context, req *GenreDeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterGenreServiceServer(s *grpc.Server, srv GenreServiceServer) {
	s.RegisterService(&_GenreService_serviceDesc, srv)
}

func _GenreService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenreGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenreServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.GenreService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenreServiceServer).Get(ctx, req.(*GenreGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenreService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenreServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.GenreService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenreServiceServer).GetAll(ctx, req.(*FilterOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenreService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenreUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenreServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.GenreService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenreServiceServer).Update(ctx, req.(*GenreUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenreService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenreCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenreServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.GenreService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenreServiceServer).Create(ctx, req.(*GenreCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenreService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenreDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenreServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.GenreService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenreServiceServer).Delete(ctx, req.(*GenreDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GenreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "content.GenreService",
	HandlerType: (*GenreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _GenreService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _GenreService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GenreService_Update_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _GenreService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GenreService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "genre_service.proto",
}
