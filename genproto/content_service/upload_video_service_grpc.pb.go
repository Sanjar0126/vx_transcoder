// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package content_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UploadVideoServiceClient is the client API for UploadVideoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploadVideoServiceClient interface {
	Create(ctx context.Context, in *UploadVideoCreateRequest, opts ...grpc.CallOption) (*UploadVideoGetResponse, error)
	Get(ctx context.Context, in *UploadVideoGetRequest, opts ...grpc.CallOption) (*UploadVideoGetResponse, error)
	Delete(ctx context.Context, in *DeleteUploadedVideoRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetAll(ctx context.Context, in *UploadedVideoGetAllRequest, opts ...grpc.CallOption) (*UploadedVideoGetAllResponse, error)
	Update(ctx context.Context, in *UpdateUploadedVideoRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type uploadVideoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadVideoServiceClient(cc grpc.ClientConnInterface) UploadVideoServiceClient {
	return &uploadVideoServiceClient{cc}
}

func (c *uploadVideoServiceClient) Create(ctx context.Context, in *UploadVideoCreateRequest, opts ...grpc.CallOption) (*UploadVideoGetResponse, error) {
	out := new(UploadVideoGetResponse)
	err := c.cc.Invoke(ctx, "/content.UploadVideoService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadVideoServiceClient) Get(ctx context.Context, in *UploadVideoGetRequest, opts ...grpc.CallOption) (*UploadVideoGetResponse, error) {
	out := new(UploadVideoGetResponse)
	err := c.cc.Invoke(ctx, "/content.UploadVideoService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadVideoServiceClient) Delete(ctx context.Context, in *DeleteUploadedVideoRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/content.UploadVideoService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadVideoServiceClient) GetAll(ctx context.Context, in *UploadedVideoGetAllRequest, opts ...grpc.CallOption) (*UploadedVideoGetAllResponse, error) {
	out := new(UploadedVideoGetAllResponse)
	err := c.cc.Invoke(ctx, "/content.UploadVideoService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadVideoServiceClient) Update(ctx context.Context, in *UpdateUploadedVideoRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/content.UploadVideoService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploadVideoServiceServer is the server API for UploadVideoService service.
// All implementations must embed UnimplementedUploadVideoServiceServer
// for forward compatibility
type UploadVideoServiceServer interface {
	Create(context.Context, *UploadVideoCreateRequest) (*UploadVideoGetResponse, error)
	Get(context.Context, *UploadVideoGetRequest) (*UploadVideoGetResponse, error)
	Delete(context.Context, *DeleteUploadedVideoRequest) (*empty.Empty, error)
	GetAll(context.Context, *UploadedVideoGetAllRequest) (*UploadedVideoGetAllResponse, error)
	Update(context.Context, *UpdateUploadedVideoRequest) (*empty.Empty, error)
	mustEmbedUnimplementedUploadVideoServiceServer()
}

// UnimplementedUploadVideoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUploadVideoServiceServer struct {
}

func (UnimplementedUploadVideoServiceServer) Create(context.Context, *UploadVideoCreateRequest) (*UploadVideoGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUploadVideoServiceServer) Get(context.Context, *UploadVideoGetRequest) (*UploadVideoGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUploadVideoServiceServer) Delete(context.Context, *DeleteUploadedVideoRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUploadVideoServiceServer) GetAll(context.Context, *UploadedVideoGetAllRequest) (*UploadedVideoGetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedUploadVideoServiceServer) Update(context.Context, *UpdateUploadedVideoRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUploadVideoServiceServer) mustEmbedUnimplementedUploadVideoServiceServer() {}

// UnsafeUploadVideoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploadVideoServiceServer will
// result in compilation errors.
type UnsafeUploadVideoServiceServer interface {
	mustEmbedUnimplementedUploadVideoServiceServer()
}

func RegisterUploadVideoServiceServer(s grpc.ServiceRegistrar, srv UploadVideoServiceServer) {
	s.RegisterService(&UploadVideoService_ServiceDesc, srv)
}

func _UploadVideoService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadVideoCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadVideoServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.UploadVideoService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadVideoServiceServer).Create(ctx, req.(*UploadVideoCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadVideoService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadVideoGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadVideoServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.UploadVideoService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadVideoServiceServer).Get(ctx, req.(*UploadVideoGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadVideoService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUploadedVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadVideoServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.UploadVideoService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadVideoServiceServer).Delete(ctx, req.(*DeleteUploadedVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadVideoService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadedVideoGetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadVideoServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.UploadVideoService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadVideoServiceServer).GetAll(ctx, req.(*UploadedVideoGetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadVideoService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUploadedVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadVideoServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.UploadVideoService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadVideoServiceServer).Update(ctx, req.(*UpdateUploadedVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UploadVideoService_ServiceDesc is the grpc.ServiceDesc for UploadVideoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploadVideoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "content.UploadVideoService",
	HandlerType: (*UploadVideoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UploadVideoService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _UploadVideoService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UploadVideoService_Delete_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _UploadVideoService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UploadVideoService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "upload_video_service.proto",
}
