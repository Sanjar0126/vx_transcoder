// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package content_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FavoritesListServiceClient is the client API for FavoritesListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FavoritesListServiceClient interface {
	Create(ctx context.Context, in *FavoritesListCreateRequest, opts ...grpc.CallOption) (*FavoritesListCreateResponse, error)
	GetAll(ctx context.Context, in *FavoritesListGetAllRequest, opts ...grpc.CallOption) (*FavoritesListGetAllResponse, error)
	Delete(ctx context.Context, in *FavoritesListDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetAllMovieSlugs(ctx context.Context, in *FavoritesListGetAllRequest, opts ...grpc.CallOption) (*FavoritesListMoviesSlugResponse, error)
}

type favoritesListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFavoritesListServiceClient(cc grpc.ClientConnInterface) FavoritesListServiceClient {
	return &favoritesListServiceClient{cc}
}

func (c *favoritesListServiceClient) Create(ctx context.Context, in *FavoritesListCreateRequest, opts ...grpc.CallOption) (*FavoritesListCreateResponse, error) {
	out := new(FavoritesListCreateResponse)
	err := c.cc.Invoke(ctx, "/content.FavoritesListService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoritesListServiceClient) GetAll(ctx context.Context, in *FavoritesListGetAllRequest, opts ...grpc.CallOption) (*FavoritesListGetAllResponse, error) {
	out := new(FavoritesListGetAllResponse)
	err := c.cc.Invoke(ctx, "/content.FavoritesListService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoritesListServiceClient) Delete(ctx context.Context, in *FavoritesListDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/content.FavoritesListService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoritesListServiceClient) GetAllMovieSlugs(ctx context.Context, in *FavoritesListGetAllRequest, opts ...grpc.CallOption) (*FavoritesListMoviesSlugResponse, error) {
	out := new(FavoritesListMoviesSlugResponse)
	err := c.cc.Invoke(ctx, "/content.FavoritesListService/GetAllMovieSlugs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FavoritesListServiceServer is the server API for FavoritesListService service.
// All implementations must embed UnimplementedFavoritesListServiceServer
// for forward compatibility
type FavoritesListServiceServer interface {
	Create(context.Context, *FavoritesListCreateRequest) (*FavoritesListCreateResponse, error)
	GetAll(context.Context, *FavoritesListGetAllRequest) (*FavoritesListGetAllResponse, error)
	Delete(context.Context, *FavoritesListDeleteRequest) (*empty.Empty, error)
	GetAllMovieSlugs(context.Context, *FavoritesListGetAllRequest) (*FavoritesListMoviesSlugResponse, error)
	mustEmbedUnimplementedFavoritesListServiceServer()
}

// UnimplementedFavoritesListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFavoritesListServiceServer struct {
}

func (UnimplementedFavoritesListServiceServer) Create(context.Context, *FavoritesListCreateRequest) (*FavoritesListCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFavoritesListServiceServer) GetAll(context.Context, *FavoritesListGetAllRequest) (*FavoritesListGetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedFavoritesListServiceServer) Delete(context.Context, *FavoritesListDeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFavoritesListServiceServer) GetAllMovieSlugs(context.Context, *FavoritesListGetAllRequest) (*FavoritesListMoviesSlugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMovieSlugs not implemented")
}
func (UnimplementedFavoritesListServiceServer) mustEmbedUnimplementedFavoritesListServiceServer() {}

// UnsafeFavoritesListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FavoritesListServiceServer will
// result in compilation errors.
type UnsafeFavoritesListServiceServer interface {
	mustEmbedUnimplementedFavoritesListServiceServer()
}

func RegisterFavoritesListServiceServer(s grpc.ServiceRegistrar, srv FavoritesListServiceServer) {
	s.RegisterService(&FavoritesListService_ServiceDesc, srv)
}

func _FavoritesListService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoritesListCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoritesListServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.FavoritesListService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoritesListServiceServer).Create(ctx, req.(*FavoritesListCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoritesListService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoritesListGetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoritesListServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.FavoritesListService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoritesListServiceServer).GetAll(ctx, req.(*FavoritesListGetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoritesListService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoritesListDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoritesListServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.FavoritesListService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoritesListServiceServer).Delete(ctx, req.(*FavoritesListDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoritesListService_GetAllMovieSlugs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoritesListGetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoritesListServiceServer).GetAllMovieSlugs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.FavoritesListService/GetAllMovieSlugs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoritesListServiceServer).GetAllMovieSlugs(ctx, req.(*FavoritesListGetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FavoritesListService_ServiceDesc is the grpc.ServiceDesc for FavoritesListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FavoritesListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "content.FavoritesListService",
	HandlerType: (*FavoritesListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _FavoritesListService_Create_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _FavoritesListService_GetAll_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FavoritesListService_Delete_Handler,
		},
		{
			MethodName: "GetAllMovieSlugs",
			Handler:    _FavoritesListService_GetAllMovieSlugs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "favorites_list_service.proto",
}
