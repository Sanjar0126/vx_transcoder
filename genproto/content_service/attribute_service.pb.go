// Code generated by protoc-gen-go. DO NOT EDIT.
// source: attribute_service.proto

package content_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("attribute_service.proto", fileDescriptor_f8573bba259fe8c2) }

var fileDescriptor_f8573bba259fe8c2 = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xc1, 0x4a, 0xc4, 0x30,
	0x14, 0x45, 0x07, 0x85, 0x0a, 0x41, 0x50, 0xb2, 0x18, 0x25, 0x2a, 0x0e, 0xf3, 0x01, 0x29, 0xe8,
	0x17, 0xd4, 0xa9, 0x76, 0x25, 0x82, 0xe2, 0xc6, 0x8d, 0x4c, 0xeb, 0xb5, 0x14, 0xd2, 0x24, 0x26,
	0xaf, 0x82, 0x5f, 0xee, 0x56, 0x6c, 0x9a, 0x32, 0x60, 0x8b, 0xcb, 0xf7, 0xce, 0xed, 0xe9, 0xbb,
	0x84, 0x9d, 0x6c, 0x89, 0x5c, 0x53, 0x76, 0x84, 0x57, 0x0f, 0xf7, 0xd9, 0x54, 0x90, 0xd6, 0x19,
	0x32, 0xfc, 0xa0, 0x32, 0x9a, 0xa0, 0x49, 0x1c, 0x8d, 0x89, 0x40, 0xc4, 0x61, 0x65, 0xda, 0xd6,
	0xe8, 0x61, 0x3a, 0xab, 0x8d, 0xa9, 0x15, 0xd2, 0x7e, 0x2a, 0xbb, 0xf7, 0x14, 0xad, 0xa5, 0xaf,
	0x00, 0xaf, 0xbe, 0xf7, 0xd8, 0x71, 0x16, 0x3f, 0x7f, 0x0a, 0x7e, 0x9e, 0xb3, 0xfd, 0x02, 0xc4,
	0xcf, 0xe5, 0xf0, 0x07, 0x39, 0x26, 0x0a, 0xd0, 0x23, 0x3e, 0x3a, 0x78, 0x12, 0x17, 0x33, 0xd4,
	0x5b, 0xa3, 0x3d, 0xd6, 0x0b, 0x9e, 0xb3, 0xa4, 0x00, 0x65, 0x4a, 0xf1, 0xe5, 0x18, 0xbd, 0x6b,
	0x14, 0xc1, 0x3d, 0x58, 0x6a, 0x8c, 0xf6, 0x62, 0x35, 0xa9, 0xc8, 0x94, 0xda, 0xb1, 0x6c, 0x58,
	0xf2, 0x6c, 0xdf, 0xb6, 0x04, 0x7e, 0xf9, 0x37, 0x1d, 0x48, 0xbc, 0x68, 0x29, 0x43, 0x53, 0x19,
	0x9b, 0xca, 0xdb, 0xdf, 0xa6, 0xeb, 0x05, 0xbf, 0x67, 0xc9, 0xc6, 0x61, 0x46, 0x12, 0x48, 0x94,
	0xac, 0xe6, 0x03, 0xbb, 0x37, 0xe5, 0x50, 0x98, 0xd6, 0x05, 0xf2, 0xef, 0x4d, 0x37, 0xe2, 0xe5,
	0xb4, 0x86, 0xee, 0xd7, 0xe9, 0x20, 0x89, 0x0f, 0x5c, 0x26, 0xfd, 0xfa, 0xfa, 0x27, 0x00, 0x00,
	0xff, 0xff, 0x19, 0x0a, 0x27, 0x37, 0xfc, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AttributeServiceClient is the client API for AttributeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AttributeServiceClient interface {
	Get(ctx context.Context, in *AttributeGetRequest, opts ...grpc.CallOption) (*AttributeGetResponse, error)
	GetAll(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*AttributeGetAllResponse, error)
	Update(ctx context.Context, in *AttributeUpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Create(ctx context.Context, in *AttributeCreateRequest, opts ...grpc.CallOption) (*AttributeCreateResponse, error)
	Delete(ctx context.Context, in *AttributeDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type attributeServiceClient struct {
	cc *grpc.ClientConn
}

func NewAttributeServiceClient(cc *grpc.ClientConn) AttributeServiceClient {
	return &attributeServiceClient{cc}
}

func (c *attributeServiceClient) Get(ctx context.Context, in *AttributeGetRequest, opts ...grpc.CallOption) (*AttributeGetResponse, error) {
	out := new(AttributeGetResponse)
	err := c.cc.Invoke(ctx, "/content.AttributeService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeServiceClient) GetAll(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*AttributeGetAllResponse, error) {
	out := new(AttributeGetAllResponse)
	err := c.cc.Invoke(ctx, "/content.AttributeService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeServiceClient) Update(ctx context.Context, in *AttributeUpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/content.AttributeService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeServiceClient) Create(ctx context.Context, in *AttributeCreateRequest, opts ...grpc.CallOption) (*AttributeCreateResponse, error) {
	out := new(AttributeCreateResponse)
	err := c.cc.Invoke(ctx, "/content.AttributeService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeServiceClient) Delete(ctx context.Context, in *AttributeDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/content.AttributeService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttributeServiceServer is the server API for AttributeService service.
type AttributeServiceServer interface {
	Get(context.Context, *AttributeGetRequest) (*AttributeGetResponse, error)
	GetAll(context.Context, *FilterOptions) (*AttributeGetAllResponse, error)
	Update(context.Context, *AttributeUpdateRequest) (*empty.Empty, error)
	Create(context.Context, *AttributeCreateRequest) (*AttributeCreateResponse, error)
	Delete(context.Context, *AttributeDeleteRequest) (*empty.Empty, error)
}

// UnimplementedAttributeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAttributeServiceServer struct {
}

func (*UnimplementedAttributeServiceServer) Get(ctx context.Context, req *AttributeGetRequest) (*AttributeGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedAttributeServiceServer) GetAll(ctx context.Context, req *FilterOptions) (*AttributeGetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedAttributeServiceServer) Update(ctx context.Context, req *AttributeUpdateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedAttributeServiceServer) Create(ctx context.Context, req *AttributeCreateRequest) (*AttributeCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedAttributeServiceServer) Delete(ctx context.Context, req *AttributeDeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterAttributeServiceServer(s *grpc.Server, srv AttributeServiceServer) {
	s.RegisterService(&_AttributeService_serviceDesc, srv)
}

func _AttributeService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.AttributeService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeServiceServer).Get(ctx, req.(*AttributeGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributeService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.AttributeService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeServiceServer).GetAll(ctx, req.(*FilterOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.AttributeService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeServiceServer).Update(ctx, req.(*AttributeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.AttributeService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeServiceServer).Create(ctx, req.(*AttributeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.AttributeService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeServiceServer).Delete(ctx, req.(*AttributeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AttributeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "content.AttributeService",
	HandlerType: (*AttributeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _AttributeService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _AttributeService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AttributeService_Update_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _AttributeService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AttributeService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "attribute_service.proto",
}
