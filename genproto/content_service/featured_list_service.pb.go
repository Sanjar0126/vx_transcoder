// Code generated by protoc-gen-go. DO NOT EDIT.
// source: featured_list_service.proto

package content_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("featured_list_service.proto", fileDescriptor_c94eed286cc245b5) }

var fileDescriptor_c94eed286cc245b5 = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x4f, 0x4b, 0x03, 0x31,
	0x10, 0xc5, 0x45, 0x61, 0x85, 0xe0, 0x29, 0x85, 0x22, 0xe9, 0x41, 0xa9, 0xf7, 0x2c, 0xe8, 0x27,
	0xa8, 0xb6, 0x5d, 0x0f, 0x82, 0xa0, 0x78, 0xf1, 0x52, 0xda, 0xed, 0xeb, 0x12, 0xc8, 0x66, 0x62,
	0x32, 0x2b, 0xf8, 0xdd, 0x3d, 0x48, 0x37, 0xbb, 0xfe, 0x01, 0x97, 0x1e, 0xf3, 0xde, 0xcb, 0x6f,
	0xde, 0x30, 0x62, 0xb2, 0xc3, 0x9a, 0x9b, 0x80, 0xed, 0xca, 0x9a, 0xc8, 0xab, 0x88, 0xf0, 0x6e,
	0x4a, 0x68, 0x1f, 0x88, 0x49, 0x9e, 0x96, 0xe4, 0x18, 0x8e, 0xd5, 0xa4, 0x22, 0xaa, 0x2c, 0xf2,
	0x56, 0xde, 0x34, 0xbb, 0x1c, 0xb5, 0xe7, 0x8f, 0x94, 0x52, 0xa3, 0x3f, 0x88, 0x4e, 0x3c, 0x2b,
	0xa9, 0xae, 0xc9, 0xa5, 0xd7, 0xf5, 0xe7, 0xb1, 0x18, 0x2d, 0xbb, 0xd4, 0x83, 0x89, 0xfc, 0x9c,
	0xc6, 0xc8, 0xb9, 0xc8, 0xee, 0x02, 0xd6, 0x0c, 0x39, 0xd5, 0xdd, 0x2c, 0xfd, 0x3b, 0x97, 0xcc,
	0x27, 0xbc, 0x35, 0x88, 0xac, 0xc6, 0x3a, 0xd5, 0xd0, 0x7d, 0x0d, 0xbd, 0xd8, 0xd7, 0x90, 0xf7,
	0xe2, 0xa4, 0x00, 0xcb, 0x8b, 0x7f, 0x11, 0x05, 0xb8, 0xff, 0x7f, 0x39, 0x1c, 0x88, 0x9e, 0x5c,
	0x84, 0x5c, 0x88, 0xac, 0x00, 0xcf, 0xac, 0x95, 0xe3, 0x9f, 0xac, 0xb1, 0x8c, 0xf0, 0xe8, 0xd9,
	0x90, 0x8b, 0xea, 0x6a, 0x88, 0x31, 0xb3, 0xf6, 0x1b, 0xb3, 0x14, 0xd9, 0x8b, 0xdf, 0x0e, 0xaf,
	0x95, 0xcc, 0x03, 0x6b, 0x4d, 0x8f, 0xf6, 0x9c, 0x39, 0x2c, 0x06, 0x39, 0xc9, 0x3c, 0xc8, 0xb9,
	0x55, 0xaf, 0xe7, 0x15, 0x5c, 0x2b, 0xe7, 0x1d, 0xa7, 0xbf, 0xf4, 0x26, 0x6b, 0xe5, 0x9b, 0xaf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x58, 0x92, 0x09, 0xd4, 0x09, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FeaturedListServiceClient is the client API for FeaturedListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FeaturedListServiceClient interface {
	Create(ctx context.Context, in *FeaturedListCreateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *FeaturedListGetRequest, opts ...grpc.CallOption) (*FeaturedListGetResponse, error)
	GetAll(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*FeaturedListGetAllResponse, error)
	Update(ctx context.Context, in *FeaturedListUpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *FeaturedListDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type featuredListServiceClient struct {
	cc *grpc.ClientConn
}

func NewFeaturedListServiceClient(cc *grpc.ClientConn) FeaturedListServiceClient {
	return &featuredListServiceClient{cc}
}

func (c *featuredListServiceClient) Create(ctx context.Context, in *FeaturedListCreateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/content.FeaturedListService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featuredListServiceClient) Get(ctx context.Context, in *FeaturedListGetRequest, opts ...grpc.CallOption) (*FeaturedListGetResponse, error) {
	out := new(FeaturedListGetResponse)
	err := c.cc.Invoke(ctx, "/content.FeaturedListService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featuredListServiceClient) GetAll(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*FeaturedListGetAllResponse, error) {
	out := new(FeaturedListGetAllResponse)
	err := c.cc.Invoke(ctx, "/content.FeaturedListService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featuredListServiceClient) Update(ctx context.Context, in *FeaturedListUpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/content.FeaturedListService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featuredListServiceClient) Delete(ctx context.Context, in *FeaturedListDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/content.FeaturedListService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeaturedListServiceServer is the server API for FeaturedListService service.
type FeaturedListServiceServer interface {
	Create(context.Context, *FeaturedListCreateRequest) (*empty.Empty, error)
	Get(context.Context, *FeaturedListGetRequest) (*FeaturedListGetResponse, error)
	GetAll(context.Context, *FilterOptions) (*FeaturedListGetAllResponse, error)
	Update(context.Context, *FeaturedListUpdateRequest) (*empty.Empty, error)
	Delete(context.Context, *FeaturedListDeleteRequest) (*empty.Empty, error)
}

// UnimplementedFeaturedListServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFeaturedListServiceServer struct {
}

func (*UnimplementedFeaturedListServiceServer) Create(ctx context.Context, req *FeaturedListCreateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedFeaturedListServiceServer) Get(ctx context.Context, req *FeaturedListGetRequest) (*FeaturedListGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedFeaturedListServiceServer) GetAll(ctx context.Context, req *FilterOptions) (*FeaturedListGetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedFeaturedListServiceServer) Update(ctx context.Context, req *FeaturedListUpdateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedFeaturedListServiceServer) Delete(ctx context.Context, req *FeaturedListDeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterFeaturedListServiceServer(s *grpc.Server, srv FeaturedListServiceServer) {
	s.RegisterService(&_FeaturedListService_serviceDesc, srv)
}

func _FeaturedListService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeaturedListCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturedListServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.FeaturedListService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturedListServiceServer).Create(ctx, req.(*FeaturedListCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturedListService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeaturedListGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturedListServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.FeaturedListService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturedListServiceServer).Get(ctx, req.(*FeaturedListGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturedListService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturedListServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.FeaturedListService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturedListServiceServer).GetAll(ctx, req.(*FilterOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturedListService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeaturedListUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturedListServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.FeaturedListService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturedListServiceServer).Update(ctx, req.(*FeaturedListUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturedListService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeaturedListDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturedListServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.FeaturedListService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturedListServiceServer).Delete(ctx, req.(*FeaturedListDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FeaturedListService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "content.FeaturedListService",
	HandlerType: (*FeaturedListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _FeaturedListService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _FeaturedListService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _FeaturedListService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _FeaturedListService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FeaturedListService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "featured_list_service.proto",
}
