// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: movie.proto

package content_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MovieFileObjRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId    string `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id"`
	FileName  string `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name"`
	Thumbnail string `protobuf:"bytes,3,opt,name=thumbnail,proto3" json:"thumbnail"`
	Width     int32  `protobuf:"varint,4,opt,name=width,proto3" json:"width"`
	Height    int32  `protobuf:"varint,5,opt,name=height,proto3" json:"height"`
	Duration  int32  `protobuf:"varint,6,opt,name=duration,proto3" json:"duration"`
	Status    string `protobuf:"bytes,7,opt,name=status,proto3" json:"status"`
	Stage     string `protobuf:"bytes,8,opt,name=stage,proto3" json:"stage"`
	Type      string `protobuf:"bytes,9,opt,name=type,proto3" json:"type"`
}

func (x *MovieFileObjRequest) Reset() {
	*x = MovieFileObjRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovieFileObjRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieFileObjRequest) ProtoMessage() {}

func (x *MovieFileObjRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieFileObjRequest.ProtoReflect.Descriptor instead.
func (*MovieFileObjRequest) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{0}
}

func (x *MovieFileObjRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *MovieFileObjRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *MovieFileObjRequest) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *MovieFileObjRequest) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *MovieFileObjRequest) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *MovieFileObjRequest) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *MovieFileObjRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MovieFileObjRequest) GetStage() string {
	if x != nil {
		return x.Stage
	}
	return ""
}

func (x *MovieFileObjRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type MovieFileObj struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	FileId    string `protobuf:"bytes,2,opt,name=file_id,json=fileId,proto3" json:"file_id"`
	FileName  string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name"`
	Thumbnail string `protobuf:"bytes,4,opt,name=thumbnail,proto3" json:"thumbnail"`
	Width     int32  `protobuf:"varint,5,opt,name=width,proto3" json:"width"`
	Height    int32  `protobuf:"varint,6,opt,name=height,proto3" json:"height"`
	Duration  int32  `protobuf:"varint,7,opt,name=duration,proto3" json:"duration"`
	Status    string `protobuf:"bytes,8,opt,name=status,proto3" json:"status"`
	Stage     string `protobuf:"bytes,9,opt,name=stage,proto3" json:"stage"`
	Type      string `protobuf:"bytes,10,opt,name=type,proto3" json:"type"`
}

func (x *MovieFileObj) Reset() {
	*x = MovieFileObj{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovieFileObj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieFileObj) ProtoMessage() {}

func (x *MovieFileObj) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieFileObj.ProtoReflect.Descriptor instead.
func (*MovieFileObj) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{1}
}

func (x *MovieFileObj) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MovieFileObj) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *MovieFileObj) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *MovieFileObj) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *MovieFileObj) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *MovieFileObj) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *MovieFileObj) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *MovieFileObj) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MovieFileObj) GetStage() string {
	if x != nil {
		return x.Stage
	}
	return ""
}

func (x *MovieFileObj) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type MovieSlim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title            string                             `protobuf:"bytes,1,opt,name=title,proto3" json:"title"`
	Poster           string                             `protobuf:"bytes,2,opt,name=poster,proto3" json:"poster"`
	Attribute        []*AttributeCommonResponseWitValue `protobuf:"bytes,3,rep,name=attribute,proto3" json:"attribute"`
	Rating           float32                            `protobuf:"fixed32,4,opt,name=rating,proto3" json:"rating"`
	Trailers         []*MovieFileObj                    `protobuf:"bytes,5,rep,name=trailers,proto3" json:"trailers"`
	Category         *CategoryCommonResponse            `protobuf:"bytes,6,opt,name=category,proto3" json:"category"`
	AgeGroup         int32                              `protobuf:"varint,7,opt,name=age_group,json=ageGroup,proto3" json:"age_group"`
	Country          []*CountryCommonResponse           `protobuf:"bytes,8,rep,name=country,proto3" json:"country"`
	File             *MovieFileObj                      `protobuf:"bytes,9,opt,name=file,proto3" json:"file"`
	Lang             string                             `protobuf:"bytes,10,opt,name=lang,proto3" json:"lang"`
	Slug             string                             `protobuf:"bytes,11,opt,name=slug,proto3" json:"slug"`
	IsSerial         bool                               `protobuf:"varint,12,opt,name=is_serial,json=isSerial,proto3" json:"is_serial"`
	Genre            []*GenreCommonResponse             `protobuf:"bytes,13,rep,name=genre,proto3" json:"genre"`
	ReleaseYearStart int32                              `protobuf:"varint,14,opt,name=release_year_start,json=releaseYearStart,proto3" json:"release_year_start"`
	ReleaseYearEnd   int32                              `protobuf:"varint,15,opt,name=release_year_end,json=releaseYearEnd,proto3" json:"release_year_end"`
	Type             string                             `protobuf:"bytes,16,opt,name=type,proto3" json:"type"`
	Description      string                             `protobuf:"bytes,17,opt,name=description,proto3" json:"description"`
	Duration         int32                              `protobuf:"varint,18,opt,name=duration,proto3" json:"duration"`
	Logo             string                             `protobuf:"bytes,19,opt,name=logo,proto3" json:"logo"`
	SeasonCount      int32                              `protobuf:"varint,20,opt,name=season_count,json=seasonCount,proto3" json:"season_count"`
	Id               string                             `protobuf:"bytes,21,opt,name=id,proto3" json:"id"`
	Resource         string                             `protobuf:"bytes,22,opt,name=resource,proto3" json:"resource"`
	Images           *Imgs                              `protobuf:"bytes,23,opt,name=images,proto3" json:"images"`
}

func (x *MovieSlim) Reset() {
	*x = MovieSlim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovieSlim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieSlim) ProtoMessage() {}

func (x *MovieSlim) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieSlim.ProtoReflect.Descriptor instead.
func (*MovieSlim) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{2}
}

func (x *MovieSlim) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MovieSlim) GetPoster() string {
	if x != nil {
		return x.Poster
	}
	return ""
}

func (x *MovieSlim) GetAttribute() []*AttributeCommonResponseWitValue {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *MovieSlim) GetRating() float32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *MovieSlim) GetTrailers() []*MovieFileObj {
	if x != nil {
		return x.Trailers
	}
	return nil
}

func (x *MovieSlim) GetCategory() *CategoryCommonResponse {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *MovieSlim) GetAgeGroup() int32 {
	if x != nil {
		return x.AgeGroup
	}
	return 0
}

func (x *MovieSlim) GetCountry() []*CountryCommonResponse {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *MovieSlim) GetFile() *MovieFileObj {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *MovieSlim) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *MovieSlim) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *MovieSlim) GetIsSerial() bool {
	if x != nil {
		return x.IsSerial
	}
	return false
}

func (x *MovieSlim) GetGenre() []*GenreCommonResponse {
	if x != nil {
		return x.Genre
	}
	return nil
}

func (x *MovieSlim) GetReleaseYearStart() int32 {
	if x != nil {
		return x.ReleaseYearStart
	}
	return 0
}

func (x *MovieSlim) GetReleaseYearEnd() int32 {
	if x != nil {
		return x.ReleaseYearEnd
	}
	return 0
}

func (x *MovieSlim) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MovieSlim) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MovieSlim) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *MovieSlim) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *MovieSlim) GetSeasonCount() int32 {
	if x != nil {
		return x.SeasonCount
	}
	return 0
}

func (x *MovieSlim) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MovieSlim) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *MovieSlim) GetImages() *Imgs {
	if x != nil {
		return x.Images
	}
	return nil
}

type MovieCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title            string                   `protobuf:"bytes,1,opt,name=title,proto3" json:"title"`
	Description      string                   `protobuf:"bytes,2,opt,name=description,proto3" json:"description"`
	Plot             string                   `protobuf:"bytes,3,opt,name=plot,proto3" json:"plot"`
	Slogan           string                   `protobuf:"bytes,4,opt,name=slogan,proto3" json:"slogan"`
	ReleaseYearStart int32                    `protobuf:"varint,5,opt,name=release_year_start,json=releaseYearStart,proto3" json:"release_year_start"`
	ReleaseYearEnd   int32                    `protobuf:"varint,6,opt,name=release_year_end,json=releaseYearEnd,proto3" json:"release_year_end"`
	AgeGroup         int32                    `protobuf:"varint,7,opt,name=age_group,json=ageGroup,proto3" json:"age_group"`
	Rating           float32                  `protobuf:"fixed32,8,opt,name=rating,proto3" json:"rating"`
	Views            int32                    `protobuf:"varint,9,opt,name=views,proto3" json:"views"`
	Rank             float32                  `protobuf:"fixed32,10,opt,name=rank,proto3" json:"rank"`
	Poster           string                   `protobuf:"bytes,11,opt,name=poster,proto3" json:"poster"`
	Resource         string                   `protobuf:"bytes,12,opt,name=resource,proto3" json:"resource"`
	Platform         *AllowedPlatform         `protobuf:"bytes,13,opt,name=platform,proto3" json:"platform"`
	Category         string                   `protobuf:"bytes,14,opt,name=category,proto3" json:"category"`
	Genre            []string                 `protobuf:"bytes,15,rep,name=genre,proto3" json:"genre"`
	Staff            []*StaffWithPostion      `protobuf:"bytes,16,rep,name=staff,proto3" json:"staff"`
	Attribute        []*AttributeCommonCreate `protobuf:"bytes,17,rep,name=attribute,proto3" json:"attribute"`
	Country          []string                 `protobuf:"bytes,18,rep,name=country,proto3" json:"country"`
	Trailers         []*MovieFileObjRequest   `protobuf:"bytes,19,rep,name=trailers,proto3" json:"trailers"`
	File             *MovieFileObjRequest     `protobuf:"bytes,20,opt,name=file,proto3" json:"file"`
	PlatformRating   []*Rating                `protobuf:"bytes,21,rep,name=platform_rating,json=platformRating,proto3" json:"platform_rating"`
	ReviewsCount     *ReviewCount             `protobuf:"bytes,22,opt,name=reviews_count,json=reviewsCount,proto3" json:"reviews_count"`
	Type             string                   `protobuf:"bytes,23,opt,name=type,proto3" json:"type"`
	Logo             string                   `protobuf:"bytes,24,opt,name=logo,proto3" json:"logo"`
	Pricing          *MoviePricing            `protobuf:"bytes,25,opt,name=pricing,proto3" json:"pricing"`
	Banner           *Banner                  `protobuf:"bytes,26,opt,name=banner,proto3" json:"banner"`
	Keywords         []string                 `protobuf:"bytes,27,rep,name=keywords,proto3" json:"keywords"`
}

func (x *MovieCreateRequest) Reset() {
	*x = MovieCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovieCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieCreateRequest) ProtoMessage() {}

func (x *MovieCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieCreateRequest.ProtoReflect.Descriptor instead.
func (*MovieCreateRequest) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{3}
}

func (x *MovieCreateRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MovieCreateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MovieCreateRequest) GetPlot() string {
	if x != nil {
		return x.Plot
	}
	return ""
}

func (x *MovieCreateRequest) GetSlogan() string {
	if x != nil {
		return x.Slogan
	}
	return ""
}

func (x *MovieCreateRequest) GetReleaseYearStart() int32 {
	if x != nil {
		return x.ReleaseYearStart
	}
	return 0
}

func (x *MovieCreateRequest) GetReleaseYearEnd() int32 {
	if x != nil {
		return x.ReleaseYearEnd
	}
	return 0
}

func (x *MovieCreateRequest) GetAgeGroup() int32 {
	if x != nil {
		return x.AgeGroup
	}
	return 0
}

func (x *MovieCreateRequest) GetRating() float32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *MovieCreateRequest) GetViews() int32 {
	if x != nil {
		return x.Views
	}
	return 0
}

func (x *MovieCreateRequest) GetRank() float32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *MovieCreateRequest) GetPoster() string {
	if x != nil {
		return x.Poster
	}
	return ""
}

func (x *MovieCreateRequest) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *MovieCreateRequest) GetPlatform() *AllowedPlatform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *MovieCreateRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *MovieCreateRequest) GetGenre() []string {
	if x != nil {
		return x.Genre
	}
	return nil
}

func (x *MovieCreateRequest) GetStaff() []*StaffWithPostion {
	if x != nil {
		return x.Staff
	}
	return nil
}

func (x *MovieCreateRequest) GetAttribute() []*AttributeCommonCreate {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *MovieCreateRequest) GetCountry() []string {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *MovieCreateRequest) GetTrailers() []*MovieFileObjRequest {
	if x != nil {
		return x.Trailers
	}
	return nil
}

func (x *MovieCreateRequest) GetFile() *MovieFileObjRequest {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *MovieCreateRequest) GetPlatformRating() []*Rating {
	if x != nil {
		return x.PlatformRating
	}
	return nil
}

func (x *MovieCreateRequest) GetReviewsCount() *ReviewCount {
	if x != nil {
		return x.ReviewsCount
	}
	return nil
}

func (x *MovieCreateRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MovieCreateRequest) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *MovieCreateRequest) GetPricing() *MoviePricing {
	if x != nil {
		return x.Pricing
	}
	return nil
}

func (x *MovieCreateRequest) GetBanner() *Banner {
	if x != nil {
		return x.Banner
	}
	return nil
}

func (x *MovieCreateRequest) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

type MovieUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug             string                   `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug"`
	Lang             string                   `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang"`
	Title            string                   `protobuf:"bytes,3,opt,name=title,proto3" json:"title"`
	Description      string                   `protobuf:"bytes,4,opt,name=description,proto3" json:"description"`
	Plot             string                   `protobuf:"bytes,5,opt,name=plot,proto3" json:"plot"`
	Slogan           string                   `protobuf:"bytes,6,opt,name=slogan,proto3" json:"slogan"`
	ReleaseYearStart int32                    `protobuf:"varint,7,opt,name=release_year_start,json=releaseYearStart,proto3" json:"release_year_start"`
	ReleaseYearEnd   int32                    `protobuf:"varint,8,opt,name=release_year_end,json=releaseYearEnd,proto3" json:"release_year_end"`
	AgeGroup         int32                    `protobuf:"varint,9,opt,name=age_group,json=ageGroup,proto3" json:"age_group"`
	Rating           float32                  `protobuf:"fixed32,10,opt,name=rating,proto3" json:"rating"`
	Views            int32                    `protobuf:"varint,11,opt,name=views,proto3" json:"views"`
	Rank             float32                  `protobuf:"fixed32,12,opt,name=rank,proto3" json:"rank"`
	Poster           string                   `protobuf:"bytes,13,opt,name=poster,proto3" json:"poster"`
	Resource         string                   `protobuf:"bytes,14,opt,name=resource,proto3" json:"resource"`
	Platform         *AllowedPlatform         `protobuf:"bytes,15,opt,name=platform,proto3" json:"platform"`
	Category         string                   `protobuf:"bytes,16,opt,name=category,proto3" json:"category"`
	Genre            []string                 `protobuf:"bytes,17,rep,name=genre,proto3" json:"genre"`
	Staff            []*StaffWithPostion      `protobuf:"bytes,18,rep,name=staff,proto3" json:"staff"`
	Attribute        []*AttributeCommonCreate `protobuf:"bytes,19,rep,name=attribute,proto3" json:"attribute"`
	Country          []string                 `protobuf:"bytes,20,rep,name=country,proto3" json:"country"`
	Trailers         []*MovieFileObj          `protobuf:"bytes,21,rep,name=trailers,proto3" json:"trailers"`
	File             *MovieFileObj            `protobuf:"bytes,22,opt,name=file,proto3" json:"file"`
	PlatformRating   []*Rating                `protobuf:"bytes,23,rep,name=platform_rating,json=platformRating,proto3" json:"platform_rating"`
	ReviewsCount     *ReviewCount             `protobuf:"bytes,24,opt,name=reviews_count,json=reviewsCount,proto3" json:"reviews_count"`
	Status           string                   `protobuf:"bytes,25,opt,name=status,proto3" json:"status"`
	IsSerial         bool                     `protobuf:"varint,26,opt,name=is_serial,json=isSerial,proto3" json:"is_serial"`
	SeasonCount      int32                    `protobuf:"varint,27,opt,name=season_count,json=seasonCount,proto3" json:"season_count"`
	Type             string                   `protobuf:"bytes,28,opt,name=type,proto3" json:"type"`
	Logo             string                   `protobuf:"bytes,29,opt,name=logo,proto3" json:"logo"`
	Pricing          *MoviePricing            `protobuf:"bytes,30,opt,name=pricing,proto3" json:"pricing"`
	Banner           *Banner                  `protobuf:"bytes,31,opt,name=banner,proto3" json:"banner"`
	Keywords         []string                 `protobuf:"bytes,32,rep,name=keywords,proto3" json:"keywords"`
	Images           *Imgs                    `protobuf:"bytes,33,opt,name=images,proto3" json:"images"`
}

func (x *MovieUpdateRequest) Reset() {
	*x = MovieUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovieUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieUpdateRequest) ProtoMessage() {}

func (x *MovieUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieUpdateRequest.ProtoReflect.Descriptor instead.
func (*MovieUpdateRequest) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{4}
}

func (x *MovieUpdateRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *MovieUpdateRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *MovieUpdateRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MovieUpdateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MovieUpdateRequest) GetPlot() string {
	if x != nil {
		return x.Plot
	}
	return ""
}

func (x *MovieUpdateRequest) GetSlogan() string {
	if x != nil {
		return x.Slogan
	}
	return ""
}

func (x *MovieUpdateRequest) GetReleaseYearStart() int32 {
	if x != nil {
		return x.ReleaseYearStart
	}
	return 0
}

func (x *MovieUpdateRequest) GetReleaseYearEnd() int32 {
	if x != nil {
		return x.ReleaseYearEnd
	}
	return 0
}

func (x *MovieUpdateRequest) GetAgeGroup() int32 {
	if x != nil {
		return x.AgeGroup
	}
	return 0
}

func (x *MovieUpdateRequest) GetRating() float32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *MovieUpdateRequest) GetViews() int32 {
	if x != nil {
		return x.Views
	}
	return 0
}

func (x *MovieUpdateRequest) GetRank() float32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *MovieUpdateRequest) GetPoster() string {
	if x != nil {
		return x.Poster
	}
	return ""
}

func (x *MovieUpdateRequest) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *MovieUpdateRequest) GetPlatform() *AllowedPlatform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *MovieUpdateRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *MovieUpdateRequest) GetGenre() []string {
	if x != nil {
		return x.Genre
	}
	return nil
}

func (x *MovieUpdateRequest) GetStaff() []*StaffWithPostion {
	if x != nil {
		return x.Staff
	}
	return nil
}

func (x *MovieUpdateRequest) GetAttribute() []*AttributeCommonCreate {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *MovieUpdateRequest) GetCountry() []string {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *MovieUpdateRequest) GetTrailers() []*MovieFileObj {
	if x != nil {
		return x.Trailers
	}
	return nil
}

func (x *MovieUpdateRequest) GetFile() *MovieFileObj {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *MovieUpdateRequest) GetPlatformRating() []*Rating {
	if x != nil {
		return x.PlatformRating
	}
	return nil
}

func (x *MovieUpdateRequest) GetReviewsCount() *ReviewCount {
	if x != nil {
		return x.ReviewsCount
	}
	return nil
}

func (x *MovieUpdateRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MovieUpdateRequest) GetIsSerial() bool {
	if x != nil {
		return x.IsSerial
	}
	return false
}

func (x *MovieUpdateRequest) GetSeasonCount() int32 {
	if x != nil {
		return x.SeasonCount
	}
	return 0
}

func (x *MovieUpdateRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MovieUpdateRequest) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *MovieUpdateRequest) GetPricing() *MoviePricing {
	if x != nil {
		return x.Pricing
	}
	return nil
}

func (x *MovieUpdateRequest) GetBanner() *Banner {
	if x != nil {
		return x.Banner
	}
	return nil
}

func (x *MovieUpdateRequest) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *MovieUpdateRequest) GetImages() *Imgs {
	if x != nil {
		return x.Images
	}
	return nil
}

type MovieCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug"`
}

func (x *MovieCreateResponse) Reset() {
	*x = MovieCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovieCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieCreateResponse) ProtoMessage() {}

func (x *MovieCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieCreateResponse.ProtoReflect.Descriptor instead.
func (*MovieCreateResponse) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{5}
}

func (x *MovieCreateResponse) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type MovieGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug     string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug"`
	Lang     string `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang"`
	UserId   string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id"`
	Status   string `protobuf:"bytes,4,opt,name=status,proto3" json:"status"`
	Platform string `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform"`
	Role     string `protobuf:"bytes,6,opt,name=role,proto3" json:"role"`
}

func (x *MovieGetRequest) Reset() {
	*x = MovieGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovieGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieGetRequest) ProtoMessage() {}

func (x *MovieGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieGetRequest.ProtoReflect.Descriptor instead.
func (*MovieGetRequest) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{6}
}

func (x *MovieGetRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *MovieGetRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *MovieGetRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MovieGetRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MovieGetRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *MovieGetRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type Last struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpisodeNumber int32 `protobuf:"varint,1,opt,name=episode_number,json=episodeNumber,proto3" json:"episode_number"`
	SeasonNumber  int32 `protobuf:"varint,2,opt,name=season_number,json=seasonNumber,proto3" json:"season_number"`
}

func (x *Last) Reset() {
	*x = Last{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Last) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Last) ProtoMessage() {}

func (x *Last) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Last.ProtoReflect.Descriptor instead.
func (*Last) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{7}
}

func (x *Last) GetEpisodeNumber() int32 {
	if x != nil {
		return x.EpisodeNumber
	}
	return 0
}

func (x *Last) GetSeasonNumber() int32 {
	if x != nil {
		return x.SeasonNumber
	}
	return 0
}

type MovieGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                             `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Title            string                             `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	Slug             string                             `protobuf:"bytes,3,opt,name=slug,proto3" json:"slug"`
	Lang             string                             `protobuf:"bytes,4,opt,name=lang,proto3" json:"lang"`
	Description      string                             `protobuf:"bytes,5,opt,name=description,proto3" json:"description"`
	Plot             string                             `protobuf:"bytes,6,opt,name=plot,proto3" json:"plot"`
	Slogan           string                             `protobuf:"bytes,7,opt,name=slogan,proto3" json:"slogan"`
	ReleaseYearStart int32                              `protobuf:"varint,8,opt,name=release_year_start,json=releaseYearStart,proto3" json:"release_year_start"`
	ReleaseYearEnd   int32                              `protobuf:"varint,9,opt,name=release_year_end,json=releaseYearEnd,proto3" json:"release_year_end"`
	AgeGroup         int32                              `protobuf:"varint,10,opt,name=age_group,json=ageGroup,proto3" json:"age_group"`
	Rating           float32                            `protobuf:"fixed32,11,opt,name=rating,proto3" json:"rating"`
	Views            int32                              `protobuf:"varint,12,opt,name=views,proto3" json:"views"`
	Rank             float32                            `protobuf:"fixed32,13,opt,name=rank,proto3" json:"rank"`
	Poster           string                             `protobuf:"bytes,14,opt,name=poster,proto3" json:"poster"`
	StatusAction     []*StatusAction                    `protobuf:"bytes,17,rep,name=status_action,json=statusAction,proto3" json:"status_action"`
	Resource         string                             `protobuf:"bytes,18,opt,name=resource,proto3" json:"resource"`
	Platform         *AllowedPlatform                   `protobuf:"bytes,19,opt,name=platform,proto3" json:"platform"`
	Category         *CategoryCommonResponse            `protobuf:"bytes,20,opt,name=category,proto3" json:"category"`
	Genre            []*GenreCommonResponse             `protobuf:"bytes,21,rep,name=genre,proto3" json:"genre"`
	Staff            []*StaffCommonResponse             `protobuf:"bytes,22,rep,name=staff,proto3" json:"staff"`
	Attribute        []*AttributeCommonResponseWitValue `protobuf:"bytes,23,rep,name=attribute,proto3" json:"attribute"`
	Country          []*CountryCommonResponse           `protobuf:"bytes,24,rep,name=country,proto3" json:"country"`
	Trailers         []*MovieFileObj                    `protobuf:"bytes,25,rep,name=trailers,proto3" json:"trailers"`
	File             *MovieFileObj                      `protobuf:"bytes,26,opt,name=file,proto3" json:"file"`
	PlatformRating   []*Rating                          `protobuf:"bytes,27,rep,name=platform_rating,json=platformRating,proto3" json:"platform_rating"`
	ReviewsCount     *ReviewCount                       `protobuf:"bytes,28,opt,name=reviews_count,json=reviewsCount,proto3" json:"reviews_count"`
	CreatedAt        string                             `protobuf:"bytes,29,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt        string                             `protobuf:"bytes,30,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	IsSerial         bool                               `protobuf:"varint,31,opt,name=is_serial,json=isSerial,proto3" json:"is_serial"`
	SeasonCount      int32                              `protobuf:"varint,32,opt,name=season_count,json=seasonCount,proto3" json:"season_count"`
	Type             string                             `protobuf:"bytes,33,opt,name=type,proto3" json:"type"`
	Duration         int32                              `protobuf:"varint,34,opt,name=duration,proto3" json:"duration"`
	Logo             string                             `protobuf:"bytes,35,opt,name=logo,proto3" json:"logo"`
	Access           bool                               `protobuf:"varint,36,opt,name=access,proto3" json:"access"`
	Pricing          *MoviePricing                      `protobuf:"bytes,37,opt,name=pricing,proto3" json:"pricing"`
	Last             *Last                              `protobuf:"bytes,38,opt,name=last,proto3" json:"last"`
	Banner           *Banner                            `protobuf:"bytes,39,opt,name=banner,proto3" json:"banner"`
	Keywords         []string                           `protobuf:"bytes,40,rep,name=keywords,proto3" json:"keywords"`
	Images           *Imgs                              `protobuf:"bytes,41,opt,name=images,proto3" json:"images"`
}

func (x *MovieGetResponse) Reset() {
	*x = MovieGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovieGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieGetResponse) ProtoMessage() {}

func (x *MovieGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieGetResponse.ProtoReflect.Descriptor instead.
func (*MovieGetResponse) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{8}
}

func (x *MovieGetResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MovieGetResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MovieGetResponse) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *MovieGetResponse) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *MovieGetResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MovieGetResponse) GetPlot() string {
	if x != nil {
		return x.Plot
	}
	return ""
}

func (x *MovieGetResponse) GetSlogan() string {
	if x != nil {
		return x.Slogan
	}
	return ""
}

func (x *MovieGetResponse) GetReleaseYearStart() int32 {
	if x != nil {
		return x.ReleaseYearStart
	}
	return 0
}

func (x *MovieGetResponse) GetReleaseYearEnd() int32 {
	if x != nil {
		return x.ReleaseYearEnd
	}
	return 0
}

func (x *MovieGetResponse) GetAgeGroup() int32 {
	if x != nil {
		return x.AgeGroup
	}
	return 0
}

func (x *MovieGetResponse) GetRating() float32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *MovieGetResponse) GetViews() int32 {
	if x != nil {
		return x.Views
	}
	return 0
}

func (x *MovieGetResponse) GetRank() float32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *MovieGetResponse) GetPoster() string {
	if x != nil {
		return x.Poster
	}
	return ""
}

func (x *MovieGetResponse) GetStatusAction() []*StatusAction {
	if x != nil {
		return x.StatusAction
	}
	return nil
}

func (x *MovieGetResponse) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *MovieGetResponse) GetPlatform() *AllowedPlatform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *MovieGetResponse) GetCategory() *CategoryCommonResponse {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *MovieGetResponse) GetGenre() []*GenreCommonResponse {
	if x != nil {
		return x.Genre
	}
	return nil
}

func (x *MovieGetResponse) GetStaff() []*StaffCommonResponse {
	if x != nil {
		return x.Staff
	}
	return nil
}

func (x *MovieGetResponse) GetAttribute() []*AttributeCommonResponseWitValue {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *MovieGetResponse) GetCountry() []*CountryCommonResponse {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *MovieGetResponse) GetTrailers() []*MovieFileObj {
	if x != nil {
		return x.Trailers
	}
	return nil
}

func (x *MovieGetResponse) GetFile() *MovieFileObj {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *MovieGetResponse) GetPlatformRating() []*Rating {
	if x != nil {
		return x.PlatformRating
	}
	return nil
}

func (x *MovieGetResponse) GetReviewsCount() *ReviewCount {
	if x != nil {
		return x.ReviewsCount
	}
	return nil
}

func (x *MovieGetResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *MovieGetResponse) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *MovieGetResponse) GetIsSerial() bool {
	if x != nil {
		return x.IsSerial
	}
	return false
}

func (x *MovieGetResponse) GetSeasonCount() int32 {
	if x != nil {
		return x.SeasonCount
	}
	return 0
}

func (x *MovieGetResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MovieGetResponse) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *MovieGetResponse) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *MovieGetResponse) GetAccess() bool {
	if x != nil {
		return x.Access
	}
	return false
}

func (x *MovieGetResponse) GetPricing() *MoviePricing {
	if x != nil {
		return x.Pricing
	}
	return nil
}

func (x *MovieGetResponse) GetLast() *Last {
	if x != nil {
		return x.Last
	}
	return nil
}

func (x *MovieGetResponse) GetBanner() *Banner {
	if x != nil {
		return x.Banner
	}
	return nil
}

func (x *MovieGetResponse) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *MovieGetResponse) GetImages() *Imgs {
	if x != nil {
		return x.Images
	}
	return nil
}

type MovieDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug"`
}

func (x *MovieDeleteRequest) Reset() {
	*x = MovieDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovieDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieDeleteRequest) ProtoMessage() {}

func (x *MovieDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieDeleteRequest.ProtoReflect.Descriptor instead.
func (*MovieDeleteRequest) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{9}
}

func (x *MovieDeleteRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type GenreSlugName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	Slug        string `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description"`
}

func (x *GenreSlugName) Reset() {
	*x = GenreSlugName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenreSlugName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenreSlugName) ProtoMessage() {}

func (x *GenreSlugName) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenreSlugName.ProtoReflect.Descriptor instead.
func (*GenreSlugName) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{10}
}

func (x *GenreSlugName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GenreSlugName) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *GenreSlugName) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type MoviesAndGenre struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Genre    *GenreSlugName `protobuf:"bytes,1,opt,name=genre,proto3" json:"genre"`
	Movies   []*MovieSlim   `protobuf:"bytes,2,rep,name=movies,proto3" json:"movies"`
	Gradient *Gradient      `protobuf:"bytes,3,opt,name=gradient,proto3" json:"gradient"`
}

func (x *MoviesAndGenre) Reset() {
	*x = MoviesAndGenre{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoviesAndGenre) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoviesAndGenre) ProtoMessage() {}

func (x *MoviesAndGenre) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoviesAndGenre.ProtoReflect.Descriptor instead.
func (*MoviesAndGenre) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{11}
}

func (x *MoviesAndGenre) GetGenre() *GenreSlugName {
	if x != nil {
		return x.Genre
	}
	return nil
}

func (x *MoviesAndGenre) GetMovies() []*MovieSlim {
	if x != nil {
		return x.Movies
	}
	return nil
}

func (x *MoviesAndGenre) GetGradient() *Gradient {
	if x != nil {
		return x.Gradient
	}
	return nil
}

type MovieGetAllByGenresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objects []*MoviesAndGenre `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects"`
}

func (x *MovieGetAllByGenresResponse) Reset() {
	*x = MovieGetAllByGenresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovieGetAllByGenresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieGetAllByGenresResponse) ProtoMessage() {}

func (x *MovieGetAllByGenresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieGetAllByGenresResponse.ProtoReflect.Descriptor instead.
func (*MovieGetAllByGenresResponse) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{12}
}

func (x *MovieGetAllByGenresResponse) GetObjects() []*MoviesAndGenre {
	if x != nil {
		return x.Objects
	}
	return nil
}

type MovieGetAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objects []*MovieSlim `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects"`
	Count   int32        `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
}

func (x *MovieGetAllResponse) Reset() {
	*x = MovieGetAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovieGetAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieGetAllResponse) ProtoMessage() {}

func (x *MovieGetAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieGetAllResponse.ProtoReflect.Descriptor instead.
func (*MovieGetAllResponse) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{13}
}

func (x *MovieGetAllResponse) GetObjects() []*MovieSlim {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *MovieGetAllResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RelatedMoviesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug     string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug"`
	Lang     string `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang"`
	Limit    int32  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit"`
	Status   string `protobuf:"bytes,4,opt,name=status,proto3" json:"status"`
	Platform string `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform"`
	Category string `protobuf:"bytes,6,opt,name=category,proto3" json:"category"`
}

func (x *RelatedMoviesRequest) Reset() {
	*x = RelatedMoviesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedMoviesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedMoviesRequest) ProtoMessage() {}

func (x *RelatedMoviesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedMoviesRequest.ProtoReflect.Descriptor instead.
func (*RelatedMoviesRequest) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{14}
}

func (x *RelatedMoviesRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *RelatedMoviesRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *RelatedMoviesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RelatedMoviesRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RelatedMoviesRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *RelatedMoviesRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type RelatedMoviesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objects []*MovieSlim `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects"`
	Count   int32        `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
}

func (x *RelatedMoviesResponse) Reset() {
	*x = RelatedMoviesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedMoviesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedMoviesResponse) ProtoMessage() {}

func (x *RelatedMoviesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedMoviesResponse.ProtoReflect.Descriptor instead.
func (*RelatedMoviesResponse) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{15}
}

func (x *RelatedMoviesResponse) GetObjects() []*MovieSlim {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *RelatedMoviesResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RecentlyWatchedCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id"`
	MovieSlug     string `protobuf:"bytes,2,opt,name=movie_slug,json=movieSlug,proto3" json:"movie_slug"`
	SeasonNumber  int32  `protobuf:"varint,3,opt,name=season_number,json=seasonNumber,proto3" json:"season_number"`
	EpisodeNumber int32  `protobuf:"varint,4,opt,name=episode_number,json=episodeNumber,proto3" json:"episode_number"`
	Duration      int32  `protobuf:"varint,5,opt,name=duration,proto3" json:"duration"`
	Status        string `protobuf:"bytes,6,opt,name=status,proto3" json:"status"`
}

func (x *RecentlyWatchedCreateRequest) Reset() {
	*x = RecentlyWatchedCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecentlyWatchedCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentlyWatchedCreateRequest) ProtoMessage() {}

func (x *RecentlyWatchedCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentlyWatchedCreateRequest.ProtoReflect.Descriptor instead.
func (*RecentlyWatchedCreateRequest) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{16}
}

func (x *RecentlyWatchedCreateRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RecentlyWatchedCreateRequest) GetMovieSlug() string {
	if x != nil {
		return x.MovieSlug
	}
	return ""
}

func (x *RecentlyWatchedCreateRequest) GetSeasonNumber() int32 {
	if x != nil {
		return x.SeasonNumber
	}
	return 0
}

func (x *RecentlyWatchedCreateRequest) GetEpisodeNumber() int32 {
	if x != nil {
		return x.EpisodeNumber
	}
	return 0
}

func (x *RecentlyWatchedCreateRequest) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *RecentlyWatchedCreateRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type RecentlyWatchedMovie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonNumber  int32      `protobuf:"varint,1,opt,name=season_number,json=seasonNumber,proto3" json:"season_number"`
	EpisodeNumber int32      `protobuf:"varint,2,opt,name=episode_number,json=episodeNumber,proto3" json:"episode_number"`
	Movie         *MovieSlim `protobuf:"bytes,3,opt,name=movie,proto3" json:"movie"`
	Duration      int32      `protobuf:"varint,4,opt,name=duration,proto3" json:"duration"`
	FullDuration  int32      `protobuf:"varint,5,opt,name=full_duration,json=fullDuration,proto3" json:"full_duration"`
}

func (x *RecentlyWatchedMovie) Reset() {
	*x = RecentlyWatchedMovie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecentlyWatchedMovie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentlyWatchedMovie) ProtoMessage() {}

func (x *RecentlyWatchedMovie) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentlyWatchedMovie.ProtoReflect.Descriptor instead.
func (*RecentlyWatchedMovie) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{17}
}

func (x *RecentlyWatchedMovie) GetSeasonNumber() int32 {
	if x != nil {
		return x.SeasonNumber
	}
	return 0
}

func (x *RecentlyWatchedMovie) GetEpisodeNumber() int32 {
	if x != nil {
		return x.EpisodeNumber
	}
	return 0
}

func (x *RecentlyWatchedMovie) GetMovie() *MovieSlim {
	if x != nil {
		return x.Movie
	}
	return nil
}

func (x *RecentlyWatchedMovie) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *RecentlyWatchedMovie) GetFullDuration() int32 {
	if x != nil {
		return x.FullDuration
	}
	return 0
}

type RecentlyWatchedMoviesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objects []*RecentlyWatchedMovie `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects"`
	Count   int32                   `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
}

func (x *RecentlyWatchedMoviesResponse) Reset() {
	*x = RecentlyWatchedMoviesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecentlyWatchedMoviesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentlyWatchedMoviesResponse) ProtoMessage() {}

func (x *RecentlyWatchedMoviesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentlyWatchedMoviesResponse.ProtoReflect.Descriptor instead.
func (*RecentlyWatchedMoviesResponse) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{18}
}

func (x *RecentlyWatchedMoviesResponse) GetObjects() []*RecentlyWatchedMovie {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *RecentlyWatchedMoviesResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type UpdatePricingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug              string `protobuf:"bytes,3,opt,name=slug,proto3" json:"slug"`
	Price             int32  `protobuf:"varint,4,opt,name=price,proto3" json:"price"`
	ActiveHours       int32  `protobuf:"varint,5,opt,name=active_hours,json=activeHours,proto3" json:"active_hours"`
	InitialPrice      int32  `protobuf:"varint,6,opt,name=initial_price,json=initialPrice,proto3" json:"initial_price"`
	DeclinePeriod     int32  `protobuf:"varint,7,opt,name=decline_period,json=declinePeriod,proto3" json:"decline_period"`
	DeclinePrice      int32  `protobuf:"varint,8,opt,name=decline_price,json=declinePrice,proto3" json:"decline_price"`
	InitialDeclineDay string `protobuf:"bytes,9,opt,name=initial_decline_day,json=initialDeclineDay,proto3" json:"initial_decline_day"`
	FinalDeclineDay   string `protobuf:"bytes,10,opt,name=final_decline_day,json=finalDeclineDay,proto3" json:"final_decline_day"`
}

func (x *UpdatePricingRequest) Reset() {
	*x = UpdatePricingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePricingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePricingRequest) ProtoMessage() {}

func (x *UpdatePricingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePricingRequest.ProtoReflect.Descriptor instead.
func (*UpdatePricingRequest) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{19}
}

func (x *UpdatePricingRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *UpdatePricingRequest) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *UpdatePricingRequest) GetActiveHours() int32 {
	if x != nil {
		return x.ActiveHours
	}
	return 0
}

func (x *UpdatePricingRequest) GetInitialPrice() int32 {
	if x != nil {
		return x.InitialPrice
	}
	return 0
}

func (x *UpdatePricingRequest) GetDeclinePeriod() int32 {
	if x != nil {
		return x.DeclinePeriod
	}
	return 0
}

func (x *UpdatePricingRequest) GetDeclinePrice() int32 {
	if x != nil {
		return x.DeclinePrice
	}
	return 0
}

func (x *UpdatePricingRequest) GetInitialDeclineDay() string {
	if x != nil {
		return x.InitialDeclineDay
	}
	return ""
}

func (x *UpdatePricingRequest) GetFinalDeclineDay() string {
	if x != nil {
		return x.FinalDeclineDay
	}
	return ""
}

type MoviePricing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price             int32  `protobuf:"varint,1,opt,name=price,proto3" json:"price"`
	ActiveHours       int32  `protobuf:"varint,2,opt,name=active_hours,json=activeHours,proto3" json:"active_hours"`
	InitialPrice      int32  `protobuf:"varint,3,opt,name=initial_price,json=initialPrice,proto3" json:"initial_price"`
	DeclinePeriod     int32  `protobuf:"varint,4,opt,name=decline_period,json=declinePeriod,proto3" json:"decline_period"`
	DeclinePrice      int32  `protobuf:"varint,5,opt,name=decline_price,json=declinePrice,proto3" json:"decline_price"`
	InitialDeclineDay string `protobuf:"bytes,6,opt,name=initial_decline_day,json=initialDeclineDay,proto3" json:"initial_decline_day"`
	FinalDeclineDay   string `protobuf:"bytes,7,opt,name=final_decline_day,json=finalDeclineDay,proto3" json:"final_decline_day"`
}

func (x *MoviePricing) Reset() {
	*x = MoviePricing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoviePricing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoviePricing) ProtoMessage() {}

func (x *MoviePricing) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoviePricing.ProtoReflect.Descriptor instead.
func (*MoviePricing) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{20}
}

func (x *MoviePricing) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MoviePricing) GetActiveHours() int32 {
	if x != nil {
		return x.ActiveHours
	}
	return 0
}

func (x *MoviePricing) GetInitialPrice() int32 {
	if x != nil {
		return x.InitialPrice
	}
	return 0
}

func (x *MoviePricing) GetDeclinePeriod() int32 {
	if x != nil {
		return x.DeclinePeriod
	}
	return 0
}

func (x *MoviePricing) GetDeclinePrice() int32 {
	if x != nil {
		return x.DeclinePrice
	}
	return 0
}

func (x *MoviePricing) GetInitialDeclineDay() string {
	if x != nil {
		return x.InitialDeclineDay
	}
	return ""
}

func (x *MoviePricing) GetFinalDeclineDay() string {
	if x != nil {
		return x.FinalDeclineDay
	}
	return ""
}

type PurchasedMoviesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug  []string `protobuf:"bytes,1,rep,name=slug,proto3" json:"slug"`
	Limit int32    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	Page  int32    `protobuf:"varint,3,opt,name=page,proto3" json:"page"`
	Lang  string   `protobuf:"bytes,4,opt,name=lang,proto3" json:"lang"`
}

func (x *PurchasedMoviesRequest) Reset() {
	*x = PurchasedMoviesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchasedMoviesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchasedMoviesRequest) ProtoMessage() {}

func (x *PurchasedMoviesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchasedMoviesRequest.ProtoReflect.Descriptor instead.
func (*PurchasedMoviesRequest) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{21}
}

func (x *PurchasedMoviesRequest) GetSlug() []string {
	if x != nil {
		return x.Slug
	}
	return nil
}

func (x *PurchasedMoviesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PurchasedMoviesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PurchasedMoviesRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type MovieFilterOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int32    `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit     int32    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	Search    string   `protobuf:"bytes,3,opt,name=search,proto3" json:"search"`
	Lang      string   `protobuf:"bytes,4,opt,name=lang,proto3" json:"lang"`
	Genre     []string `protobuf:"bytes,5,rep,name=genre,proto3" json:"genre"`
	Status    string   `protobuf:"bytes,6,opt,name=status,proto3" json:"status"`
	Platform  string   `protobuf:"bytes,7,opt,name=platform,proto3" json:"platform"`
	Category  string   `protobuf:"bytes,8,opt,name=category,proto3" json:"category"`
	Type      string   `protobuf:"bytes,9,opt,name=type,proto3" json:"type"`
	Resource  string   `protobuf:"bytes,10,opt,name=resource,proto3" json:"resource"`
	Sort      string   `protobuf:"bytes,11,opt,name=sort,proto3" json:"sort"`
	SortOrder string   `protobuf:"bytes,12,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order"`
}

func (x *MovieFilterOptions) Reset() {
	*x = MovieFilterOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovieFilterOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieFilterOptions) ProtoMessage() {}

func (x *MovieFilterOptions) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieFilterOptions.ProtoReflect.Descriptor instead.
func (*MovieFilterOptions) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{22}
}

func (x *MovieFilterOptions) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *MovieFilterOptions) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *MovieFilterOptions) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *MovieFilterOptions) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *MovieFilterOptions) GetGenre() []string {
	if x != nil {
		return x.Genre
	}
	return nil
}

func (x *MovieFilterOptions) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MovieFilterOptions) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *MovieFilterOptions) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *MovieFilterOptions) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MovieFilterOptions) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *MovieFilterOptions) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *MovieFilterOptions) GetSortOrder() string {
	if x != nil {
		return x.SortOrder
	}
	return ""
}

type ExistMovieFeaturedList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug"`
}

func (x *ExistMovieFeaturedList) Reset() {
	*x = ExistMovieFeaturedList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistMovieFeaturedList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistMovieFeaturedList) ProtoMessage() {}

func (x *ExistMovieFeaturedList) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistMovieFeaturedList.ProtoReflect.Descriptor instead.
func (*ExistMovieFeaturedList) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{23}
}

func (x *ExistMovieFeaturedList) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type VendorGetStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trailers []*MovieFileObj `protobuf:"bytes,1,rep,name=trailers,proto3" json:"trailers"`
	File     *MovieFileObj   `protobuf:"bytes,2,opt,name=file,proto3" json:"file"`
}

func (x *VendorGetStreamResponse) Reset() {
	*x = VendorGetStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorGetStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorGetStreamResponse) ProtoMessage() {}

func (x *VendorGetStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorGetStreamResponse.ProtoReflect.Descriptor instead.
func (*VendorGetStreamResponse) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{24}
}

func (x *VendorGetStreamResponse) GetTrailers() []*MovieFileObj {
	if x != nil {
		return x.Trailers
	}
	return nil
}

func (x *VendorGetStreamResponse) GetFile() *MovieFileObj {
	if x != nil {
		return x.File
	}
	return nil
}

type VendorGetStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Lang      string `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang"`
	UserId    string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id"`
	Platform  string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform"`
	EpisodeId int32  `protobuf:"varint,5,opt,name=episode_id,json=episodeId,proto3" json:"episode_id"`
	SeasonId  int32  `protobuf:"varint,6,opt,name=season_id,json=seasonId,proto3" json:"season_id"`
	IsSerial  bool   `protobuf:"varint,7,opt,name=is_serial,json=isSerial,proto3" json:"is_serial"`
}

func (x *VendorGetStreamRequest) Reset() {
	*x = VendorGetStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorGetStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorGetStreamRequest) ProtoMessage() {}

func (x *VendorGetStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorGetStreamRequest.ProtoReflect.Descriptor instead.
func (*VendorGetStreamRequest) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{25}
}

func (x *VendorGetStreamRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VendorGetStreamRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *VendorGetStreamRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *VendorGetStreamRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *VendorGetStreamRequest) GetEpisodeId() int32 {
	if x != nil {
		return x.EpisodeId
	}
	return 0
}

func (x *VendorGetStreamRequest) GetSeasonId() int32 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *VendorGetStreamRequest) GetIsSerial() bool {
	if x != nil {
		return x.IsSerial
	}
	return false
}

type VendorSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id"`
	Operation  string `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation"`
	PurchaseId string `protobuf:"bytes,3,opt,name=purchase_id,json=purchaseId,proto3" json:"purchase_id"`
	ServiceId  string `protobuf:"bytes,4,opt,name=service_id,json=serviceId,proto3" json:"service_id"`
}

func (x *VendorSubscriptionRequest) Reset() {
	*x = VendorSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorSubscriptionRequest) ProtoMessage() {}

func (x *VendorSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*VendorSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{26}
}

func (x *VendorSubscriptionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *VendorSubscriptionRequest) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *VendorSubscriptionRequest) GetPurchaseId() string {
	if x != nil {
		return x.PurchaseId
	}
	return ""
}

func (x *VendorSubscriptionRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

type VendorSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
}

func (x *VendorSubscriptionResponse) Reset() {
	*x = VendorSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorSubscriptionResponse) ProtoMessage() {}

func (x *VendorSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*VendorSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{27}
}

func (x *VendorSubscriptionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *VendorSubscriptionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_movie_proto protoreflect.FileDescriptor

var file_movie_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0b, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf5,
	0x01, 0x0a, 0x13, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x0c, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb8, 0x06, 0x0a, 0x09, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x53, 0x6c, 0x69, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x52, 0x08, 0x74, 0x72,
	0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x52,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75,
	0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x05, 0x67, 0x65,
	0x6e, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x65, 0x6e, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x59,
	0x65, 0x61, 0x72, 0x45, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6d, 0x67, 0x73, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x22, 0xd3, 0x07, 0x0a, 0x12, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x6c, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x67, 0x61, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x67, 0x61, 0x6e, 0x12, 0x2c, 0x0a,
	0x12, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x59, 0x65,
	0x61, 0x72, 0x45, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65,
	0x6e, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65,
	0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x66, 0x66, 0x57,
	0x69, 0x74, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x66,
	0x66, 0x12, 0x3c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x69, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4f,
	0x62, 0x6a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6c,
	0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x39, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f,
	0x67, 0x6f, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x70, 0x72, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xec, 0x08, 0x0a, 0x12, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x6c, 0x75, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6c, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x6c, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x67, 0x61, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x67, 0x61, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x59, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x59, 0x65, 0x61, 0x72,
	0x45, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72,
	0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x2f,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x66, 0x66, 0x57, 0x69, 0x74,
	0x68, 0x50, 0x6f, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x12,
	0x3c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6c,
	0x65, 0x72, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a,
	0x52, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x52,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x39, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x72,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x50, 0x72, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x52, 0x07, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x06, 0x62,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x06, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x20, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x25, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6d, 0x67, 0x73, 0x52,
	0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0x29, 0x0a, 0x13, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c,
	0x75, 0x67, 0x22, 0x9a, 0x01, 0x0a, 0x0f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22,
	0x52, 0x0a, 0x04, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x70, 0x69, 0x73, 0x6f,
	0x64, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x9f, 0x0b, 0x0a, 0x10, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c,
	0x75, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x6f, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6c, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6c, 0x6f, 0x67, 0x61, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6c,
	0x6f, 0x67, 0x61, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x79, 0x65, 0x61, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x79, 0x65,
	0x61, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x45, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x32,
	0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x67, 0x65, 0x6e,
	0x72, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x16, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x66,
	0x66, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x12, 0x46, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x69, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x38,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x69,
	0x6c, 0x65, 0x72, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x62,
	0x6a, 0x52, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a,
	0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x39, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67,
	0x6f, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x70,
	0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4c,
	0x61, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x28,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x25,
	0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6d, 0x67, 0x73, 0x52, 0x06, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0x28, 0x0a, 0x12, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x22,
	0x59, 0x0a, 0x0d, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x53, 0x6c, 0x75, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x99, 0x01, 0x0a, 0x0e, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x2c, 0x0a,
	0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x53, 0x6c, 0x75, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x6c, 0x69, 0x6d, 0x52,
	0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x67, 0x72,
	0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x50, 0x0a, 0x1b, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x79, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x52,
	0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x59, 0x0a, 0x13, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x53, 0x6c, 0x69, 0x6d, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x61, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x5b, 0x0a, 0x15, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x53, 0x6c, 0x69, 0x6d, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x6c, 0x79, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x6c, 0x75, 0x67,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xcd, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x05, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x53, 0x6c, 0x69, 0x6d, 0x52, 0x05, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x66,
	0x75, 0x6c, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x6e, 0x0a, 0x1d, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x6c, 0x79, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xb0, 0x02, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x68, 0x6f,
	0x75, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x69,
	0x6e, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x63,
	0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65,
	0x44, 0x61, 0x79, 0x22, 0x94, 0x02, 0x0a, 0x0c, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x6c,
	0x69, 0x6e, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x63,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x79, 0x12, 0x2a,
	0x0a, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x79, 0x22, 0x6a, 0x0a, 0x16, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0xb3, 0x02, 0x0a, 0x12, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x2c, 0x0a, 0x16,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x22, 0x77, 0x0a, 0x17, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x52, 0x08,
	0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x52, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x16, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x70, 0x69, 0x73, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x22, 0x92, 0x01, 0x0a, 0x19, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x1a, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x1a, 0x5a, 0x18, 0x67, 0x65, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_movie_proto_rawDescOnce sync.Once
	file_movie_proto_rawDescData = file_movie_proto_rawDesc
)

func file_movie_proto_rawDescGZIP() []byte {
	file_movie_proto_rawDescOnce.Do(func() {
		file_movie_proto_rawDescData = protoimpl.X.CompressGZIP(file_movie_proto_rawDescData)
	})
	return file_movie_proto_rawDescData
}

var file_movie_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_movie_proto_goTypes = []interface{}{
	(*MovieFileObjRequest)(nil),             // 0: content.MovieFileObjRequest
	(*MovieFileObj)(nil),                    // 1: content.MovieFileObj
	(*MovieSlim)(nil),                       // 2: content.MovieSlim
	(*MovieCreateRequest)(nil),              // 3: content.MovieCreateRequest
	(*MovieUpdateRequest)(nil),              // 4: content.MovieUpdateRequest
	(*MovieCreateResponse)(nil),             // 5: content.MovieCreateResponse
	(*MovieGetRequest)(nil),                 // 6: content.MovieGetRequest
	(*Last)(nil),                            // 7: content.Last
	(*MovieGetResponse)(nil),                // 8: content.MovieGetResponse
	(*MovieDeleteRequest)(nil),              // 9: content.MovieDeleteRequest
	(*GenreSlugName)(nil),                   // 10: content.GenreSlugName
	(*MoviesAndGenre)(nil),                  // 11: content.MoviesAndGenre
	(*MovieGetAllByGenresResponse)(nil),     // 12: content.MovieGetAllByGenresResponse
	(*MovieGetAllResponse)(nil),             // 13: content.MovieGetAllResponse
	(*RelatedMoviesRequest)(nil),            // 14: content.RelatedMoviesRequest
	(*RelatedMoviesResponse)(nil),           // 15: content.RelatedMoviesResponse
	(*RecentlyWatchedCreateRequest)(nil),    // 16: content.RecentlyWatchedCreateRequest
	(*RecentlyWatchedMovie)(nil),            // 17: content.RecentlyWatchedMovie
	(*RecentlyWatchedMoviesResponse)(nil),   // 18: content.RecentlyWatchedMoviesResponse
	(*UpdatePricingRequest)(nil),            // 19: content.UpdatePricingRequest
	(*MoviePricing)(nil),                    // 20: content.MoviePricing
	(*PurchasedMoviesRequest)(nil),          // 21: content.PurchasedMoviesRequest
	(*MovieFilterOptions)(nil),              // 22: content.MovieFilterOptions
	(*ExistMovieFeaturedList)(nil),          // 23: content.ExistMovieFeaturedList
	(*VendorGetStreamResponse)(nil),         // 24: content.VendorGetStreamResponse
	(*VendorGetStreamRequest)(nil),          // 25: content.VendorGetStreamRequest
	(*VendorSubscriptionRequest)(nil),       // 26: content.VendorSubscriptionRequest
	(*VendorSubscriptionResponse)(nil),      // 27: content.VendorSubscriptionResponse
	(*AttributeCommonResponseWitValue)(nil), // 28: content.AttributeCommonResponseWitValue
	(*CategoryCommonResponse)(nil),          // 29: content.CategoryCommonResponse
	(*CountryCommonResponse)(nil),           // 30: content.CountryCommonResponse
	(*GenreCommonResponse)(nil),             // 31: content.GenreCommonResponse
	(*Imgs)(nil),                            // 32: content.Imgs
	(*AllowedPlatform)(nil),                 // 33: content.AllowedPlatform
	(*StaffWithPostion)(nil),                // 34: content.StaffWithPostion
	(*AttributeCommonCreate)(nil),           // 35: content.AttributeCommonCreate
	(*Rating)(nil),                          // 36: content.Rating
	(*ReviewCount)(nil),                     // 37: content.ReviewCount
	(*Banner)(nil),                          // 38: content.Banner
	(*StatusAction)(nil),                    // 39: content.StatusAction
	(*StaffCommonResponse)(nil),             // 40: content.StaffCommonResponse
	(*Gradient)(nil),                        // 41: content.Gradient
}
var file_movie_proto_depIdxs = []int32{
	28, // 0: content.MovieSlim.attribute:type_name -> content.AttributeCommonResponseWitValue
	1,  // 1: content.MovieSlim.trailers:type_name -> content.MovieFileObj
	29, // 2: content.MovieSlim.category:type_name -> content.CategoryCommonResponse
	30, // 3: content.MovieSlim.country:type_name -> content.CountryCommonResponse
	1,  // 4: content.MovieSlim.file:type_name -> content.MovieFileObj
	31, // 5: content.MovieSlim.genre:type_name -> content.GenreCommonResponse
	32, // 6: content.MovieSlim.images:type_name -> content.Imgs
	33, // 7: content.MovieCreateRequest.platform:type_name -> content.AllowedPlatform
	34, // 8: content.MovieCreateRequest.staff:type_name -> content.StaffWithPostion
	35, // 9: content.MovieCreateRequest.attribute:type_name -> content.AttributeCommonCreate
	0,  // 10: content.MovieCreateRequest.trailers:type_name -> content.MovieFileObjRequest
	0,  // 11: content.MovieCreateRequest.file:type_name -> content.MovieFileObjRequest
	36, // 12: content.MovieCreateRequest.platform_rating:type_name -> content.Rating
	37, // 13: content.MovieCreateRequest.reviews_count:type_name -> content.ReviewCount
	20, // 14: content.MovieCreateRequest.pricing:type_name -> content.MoviePricing
	38, // 15: content.MovieCreateRequest.banner:type_name -> content.Banner
	33, // 16: content.MovieUpdateRequest.platform:type_name -> content.AllowedPlatform
	34, // 17: content.MovieUpdateRequest.staff:type_name -> content.StaffWithPostion
	35, // 18: content.MovieUpdateRequest.attribute:type_name -> content.AttributeCommonCreate
	1,  // 19: content.MovieUpdateRequest.trailers:type_name -> content.MovieFileObj
	1,  // 20: content.MovieUpdateRequest.file:type_name -> content.MovieFileObj
	36, // 21: content.MovieUpdateRequest.platform_rating:type_name -> content.Rating
	37, // 22: content.MovieUpdateRequest.reviews_count:type_name -> content.ReviewCount
	20, // 23: content.MovieUpdateRequest.pricing:type_name -> content.MoviePricing
	38, // 24: content.MovieUpdateRequest.banner:type_name -> content.Banner
	32, // 25: content.MovieUpdateRequest.images:type_name -> content.Imgs
	39, // 26: content.MovieGetResponse.status_action:type_name -> content.StatusAction
	33, // 27: content.MovieGetResponse.platform:type_name -> content.AllowedPlatform
	29, // 28: content.MovieGetResponse.category:type_name -> content.CategoryCommonResponse
	31, // 29: content.MovieGetResponse.genre:type_name -> content.GenreCommonResponse
	40, // 30: content.MovieGetResponse.staff:type_name -> content.StaffCommonResponse
	28, // 31: content.MovieGetResponse.attribute:type_name -> content.AttributeCommonResponseWitValue
	30, // 32: content.MovieGetResponse.country:type_name -> content.CountryCommonResponse
	1,  // 33: content.MovieGetResponse.trailers:type_name -> content.MovieFileObj
	1,  // 34: content.MovieGetResponse.file:type_name -> content.MovieFileObj
	36, // 35: content.MovieGetResponse.platform_rating:type_name -> content.Rating
	37, // 36: content.MovieGetResponse.reviews_count:type_name -> content.ReviewCount
	20, // 37: content.MovieGetResponse.pricing:type_name -> content.MoviePricing
	7,  // 38: content.MovieGetResponse.last:type_name -> content.Last
	38, // 39: content.MovieGetResponse.banner:type_name -> content.Banner
	32, // 40: content.MovieGetResponse.images:type_name -> content.Imgs
	10, // 41: content.MoviesAndGenre.genre:type_name -> content.GenreSlugName
	2,  // 42: content.MoviesAndGenre.movies:type_name -> content.MovieSlim
	41, // 43: content.MoviesAndGenre.gradient:type_name -> content.Gradient
	11, // 44: content.MovieGetAllByGenresResponse.objects:type_name -> content.MoviesAndGenre
	2,  // 45: content.MovieGetAllResponse.objects:type_name -> content.MovieSlim
	2,  // 46: content.RelatedMoviesResponse.objects:type_name -> content.MovieSlim
	2,  // 47: content.RecentlyWatchedMovie.movie:type_name -> content.MovieSlim
	17, // 48: content.RecentlyWatchedMoviesResponse.objects:type_name -> content.RecentlyWatchedMovie
	1,  // 49: content.VendorGetStreamResponse.trailers:type_name -> content.MovieFileObj
	1,  // 50: content.VendorGetStreamResponse.file:type_name -> content.MovieFileObj
	51, // [51:51] is the sub-list for method output_type
	51, // [51:51] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_movie_proto_init() }
func file_movie_proto_init() {
	if File_movie_proto != nil {
		return
	}
	file_common_proto_init()
	file_genre_proto_init()
	file_attribute_proto_init()
	file_country_proto_init()
	file_staff_proto_init()
	file_category_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_movie_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovieFileObjRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovieFileObj); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovieSlim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovieCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovieUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovieCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovieGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Last); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovieGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovieDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenreSlugName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoviesAndGenre); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovieGetAllByGenresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovieGetAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedMoviesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedMoviesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecentlyWatchedCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecentlyWatchedMovie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecentlyWatchedMoviesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePricingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoviePricing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchasedMoviesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovieFilterOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistMovieFeaturedList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorGetStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorGetStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_movie_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_movie_proto_goTypes,
		DependencyIndexes: file_movie_proto_depIdxs,
		MessageInfos:      file_movie_proto_msgTypes,
	}.Build()
	File_movie_proto = out.File
	file_movie_proto_rawDesc = nil
	file_movie_proto_goTypes = nil
	file_movie_proto_depIdxs = nil
}
