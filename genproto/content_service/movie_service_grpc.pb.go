// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package content_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MovieServiceClient is the client API for MovieService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieServiceClient interface {
	Get(ctx context.Context, in *MovieGetRequest, opts ...grpc.CallOption) (*MovieGetResponse, error)
	GetAll(ctx context.Context, in *MovieFilterOptions, opts ...grpc.CallOption) (*MovieGetAllResponse, error)
	Create(ctx context.Context, in *MovieCreateRequest, opts ...grpc.CallOption) (*MovieCreateResponse, error)
	Delete(ctx context.Context, in *MovieDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Update(ctx context.Context, in *MovieUpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdatePricing(ctx context.Context, in *UpdatePricingRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetAllMovieByCategory(ctx context.Context, in *MovieFilterOptions, opts ...grpc.CallOption) (*MovieGetAllByGenresResponse, error)
	GetRelatedMovies(ctx context.Context, in *RelatedMoviesRequest, opts ...grpc.CallOption) (*RelatedMoviesResponse, error)
	GetMoviesBySlugs(ctx context.Context, in *PurchasedMoviesRequest, opts ...grpc.CallOption) (*RelatedMoviesResponse, error)
	UpdateMovieExistFeaturedList(ctx context.Context, in *ExistMovieFeaturedList, opts ...grpc.CallOption) (*empty.Empty, error)
	Search(ctx context.Context, in *MovieFilterOptions, opts ...grpc.CallOption) (*MovieGetAllResponse, error)
	HealthCheck(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type movieServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieServiceClient(cc grpc.ClientConnInterface) MovieServiceClient {
	return &movieServiceClient{cc}
}

func (c *movieServiceClient) Get(ctx context.Context, in *MovieGetRequest, opts ...grpc.CallOption) (*MovieGetResponse, error) {
	out := new(MovieGetResponse)
	err := c.cc.Invoke(ctx, "/content.MovieService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetAll(ctx context.Context, in *MovieFilterOptions, opts ...grpc.CallOption) (*MovieGetAllResponse, error) {
	out := new(MovieGetAllResponse)
	err := c.cc.Invoke(ctx, "/content.MovieService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) Create(ctx context.Context, in *MovieCreateRequest, opts ...grpc.CallOption) (*MovieCreateResponse, error) {
	out := new(MovieCreateResponse)
	err := c.cc.Invoke(ctx, "/content.MovieService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) Delete(ctx context.Context, in *MovieDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/content.MovieService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) Update(ctx context.Context, in *MovieUpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/content.MovieService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) UpdatePricing(ctx context.Context, in *UpdatePricingRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/content.MovieService/UpdatePricing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetAllMovieByCategory(ctx context.Context, in *MovieFilterOptions, opts ...grpc.CallOption) (*MovieGetAllByGenresResponse, error) {
	out := new(MovieGetAllByGenresResponse)
	err := c.cc.Invoke(ctx, "/content.MovieService/GetAllMovieByCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetRelatedMovies(ctx context.Context, in *RelatedMoviesRequest, opts ...grpc.CallOption) (*RelatedMoviesResponse, error) {
	out := new(RelatedMoviesResponse)
	err := c.cc.Invoke(ctx, "/content.MovieService/GetRelatedMovies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetMoviesBySlugs(ctx context.Context, in *PurchasedMoviesRequest, opts ...grpc.CallOption) (*RelatedMoviesResponse, error) {
	out := new(RelatedMoviesResponse)
	err := c.cc.Invoke(ctx, "/content.MovieService/GetMoviesBySlugs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) UpdateMovieExistFeaturedList(ctx context.Context, in *ExistMovieFeaturedList, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/content.MovieService/UpdateMovieExistFeaturedList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) Search(ctx context.Context, in *MovieFilterOptions, opts ...grpc.CallOption) (*MovieGetAllResponse, error) {
	out := new(MovieGetAllResponse)
	err := c.cc.Invoke(ctx, "/content.MovieService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) HealthCheck(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/content.MovieService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieServiceServer is the server API for MovieService service.
// All implementations must embed UnimplementedMovieServiceServer
// for forward compatibility
type MovieServiceServer interface {
	Get(context.Context, *MovieGetRequest) (*MovieGetResponse, error)
	GetAll(context.Context, *MovieFilterOptions) (*MovieGetAllResponse, error)
	Create(context.Context, *MovieCreateRequest) (*MovieCreateResponse, error)
	Delete(context.Context, *MovieDeleteRequest) (*empty.Empty, error)
	Update(context.Context, *MovieUpdateRequest) (*empty.Empty, error)
	UpdatePricing(context.Context, *UpdatePricingRequest) (*empty.Empty, error)
	GetAllMovieByCategory(context.Context, *MovieFilterOptions) (*MovieGetAllByGenresResponse, error)
	GetRelatedMovies(context.Context, *RelatedMoviesRequest) (*RelatedMoviesResponse, error)
	GetMoviesBySlugs(context.Context, *PurchasedMoviesRequest) (*RelatedMoviesResponse, error)
	UpdateMovieExistFeaturedList(context.Context, *ExistMovieFeaturedList) (*empty.Empty, error)
	Search(context.Context, *MovieFilterOptions) (*MovieGetAllResponse, error)
	HealthCheck(context.Context, *empty.Empty) (*empty.Empty, error)
	mustEmbedUnimplementedMovieServiceServer()
}

// UnimplementedMovieServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMovieServiceServer struct {
}

func (UnimplementedMovieServiceServer) Get(context.Context, *MovieGetRequest) (*MovieGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMovieServiceServer) GetAll(context.Context, *MovieFilterOptions) (*MovieGetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedMovieServiceServer) Create(context.Context, *MovieCreateRequest) (*MovieCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMovieServiceServer) Delete(context.Context, *MovieDeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMovieServiceServer) Update(context.Context, *MovieUpdateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMovieServiceServer) UpdatePricing(context.Context, *UpdatePricingRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePricing not implemented")
}
func (UnimplementedMovieServiceServer) GetAllMovieByCategory(context.Context, *MovieFilterOptions) (*MovieGetAllByGenresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMovieByCategory not implemented")
}
func (UnimplementedMovieServiceServer) GetRelatedMovies(context.Context, *RelatedMoviesRequest) (*RelatedMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelatedMovies not implemented")
}
func (UnimplementedMovieServiceServer) GetMoviesBySlugs(context.Context, *PurchasedMoviesRequest) (*RelatedMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMoviesBySlugs not implemented")
}
func (UnimplementedMovieServiceServer) UpdateMovieExistFeaturedList(context.Context, *ExistMovieFeaturedList) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMovieExistFeaturedList not implemented")
}
func (UnimplementedMovieServiceServer) Search(context.Context, *MovieFilterOptions) (*MovieGetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedMovieServiceServer) HealthCheck(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedMovieServiceServer) mustEmbedUnimplementedMovieServiceServer() {}

// UnsafeMovieServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieServiceServer will
// result in compilation errors.
type UnsafeMovieServiceServer interface {
	mustEmbedUnimplementedMovieServiceServer()
}

func RegisterMovieServiceServer(s grpc.ServiceRegistrar, srv MovieServiceServer) {
	s.RegisterService(&MovieService_ServiceDesc, srv)
}

func _MovieService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).Get(ctx, req.(*MovieGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieFilterOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetAll(ctx, req.(*MovieFilterOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).Create(ctx, req.(*MovieCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).Delete(ctx, req.(*MovieDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).Update(ctx, req.(*MovieUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_UpdatePricing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePricingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).UpdatePricing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieService/UpdatePricing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).UpdatePricing(ctx, req.(*UpdatePricingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetAllMovieByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieFilterOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetAllMovieByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieService/GetAllMovieByCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetAllMovieByCategory(ctx, req.(*MovieFilterOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetRelatedMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelatedMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetRelatedMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieService/GetRelatedMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetRelatedMovies(ctx, req.(*RelatedMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetMoviesBySlugs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchasedMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetMoviesBySlugs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieService/GetMoviesBySlugs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetMoviesBySlugs(ctx, req.(*PurchasedMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_UpdateMovieExistFeaturedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistMovieFeaturedList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).UpdateMovieExistFeaturedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieService/UpdateMovieExistFeaturedList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).UpdateMovieExistFeaturedList(ctx, req.(*ExistMovieFeaturedList))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieFilterOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).Search(ctx, req.(*MovieFilterOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).HealthCheck(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieService_ServiceDesc is the grpc.ServiceDesc for MovieService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "content.MovieService",
	HandlerType: (*MovieServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _MovieService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _MovieService_GetAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _MovieService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MovieService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MovieService_Update_Handler,
		},
		{
			MethodName: "UpdatePricing",
			Handler:    _MovieService_UpdatePricing_Handler,
		},
		{
			MethodName: "GetAllMovieByCategory",
			Handler:    _MovieService_GetAllMovieByCategory_Handler,
		},
		{
			MethodName: "GetRelatedMovies",
			Handler:    _MovieService_GetRelatedMovies_Handler,
		},
		{
			MethodName: "GetMoviesBySlugs",
			Handler:    _MovieService_GetMoviesBySlugs_Handler,
		},
		{
			MethodName: "UpdateMovieExistFeaturedList",
			Handler:    _MovieService_UpdateMovieExistFeaturedList_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _MovieService_Search_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _MovieService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movie_service.proto",
}

// MovieServiceMegogoClient is the client API for MovieServiceMegogo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieServiceMegogoClient interface {
	Get(ctx context.Context, in *MovieGetRequest, opts ...grpc.CallOption) (*MovieGetResponse, error)
	GetAllMovieByCategory(ctx context.Context, in *MovieFilterOptions, opts ...grpc.CallOption) (*MovieGetAllByGenresResponse, error)
	GetRelatedMovies(ctx context.Context, in *RelatedMoviesRequest, opts ...grpc.CallOption) (*RelatedMoviesResponse, error)
	GetStreams(ctx context.Context, in *VendorGetStreamRequest, opts ...grpc.CallOption) (*VendorGetStreamResponse, error)
	Subscription(ctx context.Context, in *VendorSubscriptionRequest, opts ...grpc.CallOption) (*VendorSubscriptionResponse, error)
	GetSeason(ctx context.Context, in *MovieSeasonGetRequest, opts ...grpc.CallOption) (*MovieSeasonGetResponse, error)
	GetEpisode(ctx context.Context, in *MovieEpisodeGetRequest, opts ...grpc.CallOption) (*MovieEpisodes, error)
}

type movieServiceMegogoClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieServiceMegogoClient(cc grpc.ClientConnInterface) MovieServiceMegogoClient {
	return &movieServiceMegogoClient{cc}
}

func (c *movieServiceMegogoClient) Get(ctx context.Context, in *MovieGetRequest, opts ...grpc.CallOption) (*MovieGetResponse, error) {
	out := new(MovieGetResponse)
	err := c.cc.Invoke(ctx, "/content.MovieServiceMegogo/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceMegogoClient) GetAllMovieByCategory(ctx context.Context, in *MovieFilterOptions, opts ...grpc.CallOption) (*MovieGetAllByGenresResponse, error) {
	out := new(MovieGetAllByGenresResponse)
	err := c.cc.Invoke(ctx, "/content.MovieServiceMegogo/GetAllMovieByCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceMegogoClient) GetRelatedMovies(ctx context.Context, in *RelatedMoviesRequest, opts ...grpc.CallOption) (*RelatedMoviesResponse, error) {
	out := new(RelatedMoviesResponse)
	err := c.cc.Invoke(ctx, "/content.MovieServiceMegogo/GetRelatedMovies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceMegogoClient) GetStreams(ctx context.Context, in *VendorGetStreamRequest, opts ...grpc.CallOption) (*VendorGetStreamResponse, error) {
	out := new(VendorGetStreamResponse)
	err := c.cc.Invoke(ctx, "/content.MovieServiceMegogo/GetStreams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceMegogoClient) Subscription(ctx context.Context, in *VendorSubscriptionRequest, opts ...grpc.CallOption) (*VendorSubscriptionResponse, error) {
	out := new(VendorSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/content.MovieServiceMegogo/Subscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceMegogoClient) GetSeason(ctx context.Context, in *MovieSeasonGetRequest, opts ...grpc.CallOption) (*MovieSeasonGetResponse, error) {
	out := new(MovieSeasonGetResponse)
	err := c.cc.Invoke(ctx, "/content.MovieServiceMegogo/GetSeason", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceMegogoClient) GetEpisode(ctx context.Context, in *MovieEpisodeGetRequest, opts ...grpc.CallOption) (*MovieEpisodes, error) {
	out := new(MovieEpisodes)
	err := c.cc.Invoke(ctx, "/content.MovieServiceMegogo/GetEpisode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieServiceMegogoServer is the server API for MovieServiceMegogo service.
// All implementations must embed UnimplementedMovieServiceMegogoServer
// for forward compatibility
type MovieServiceMegogoServer interface {
	Get(context.Context, *MovieGetRequest) (*MovieGetResponse, error)
	GetAllMovieByCategory(context.Context, *MovieFilterOptions) (*MovieGetAllByGenresResponse, error)
	GetRelatedMovies(context.Context, *RelatedMoviesRequest) (*RelatedMoviesResponse, error)
	GetStreams(context.Context, *VendorGetStreamRequest) (*VendorGetStreamResponse, error)
	Subscription(context.Context, *VendorSubscriptionRequest) (*VendorSubscriptionResponse, error)
	GetSeason(context.Context, *MovieSeasonGetRequest) (*MovieSeasonGetResponse, error)
	GetEpisode(context.Context, *MovieEpisodeGetRequest) (*MovieEpisodes, error)
	mustEmbedUnimplementedMovieServiceMegogoServer()
}

// UnimplementedMovieServiceMegogoServer must be embedded to have forward compatible implementations.
type UnimplementedMovieServiceMegogoServer struct {
}

func (UnimplementedMovieServiceMegogoServer) Get(context.Context, *MovieGetRequest) (*MovieGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMovieServiceMegogoServer) GetAllMovieByCategory(context.Context, *MovieFilterOptions) (*MovieGetAllByGenresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMovieByCategory not implemented")
}
func (UnimplementedMovieServiceMegogoServer) GetRelatedMovies(context.Context, *RelatedMoviesRequest) (*RelatedMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelatedMovies not implemented")
}
func (UnimplementedMovieServiceMegogoServer) GetStreams(context.Context, *VendorGetStreamRequest) (*VendorGetStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreams not implemented")
}
func (UnimplementedMovieServiceMegogoServer) Subscription(context.Context, *VendorSubscriptionRequest) (*VendorSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscription not implemented")
}
func (UnimplementedMovieServiceMegogoServer) GetSeason(context.Context, *MovieSeasonGetRequest) (*MovieSeasonGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeason not implemented")
}
func (UnimplementedMovieServiceMegogoServer) GetEpisode(context.Context, *MovieEpisodeGetRequest) (*MovieEpisodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEpisode not implemented")
}
func (UnimplementedMovieServiceMegogoServer) mustEmbedUnimplementedMovieServiceMegogoServer() {}

// UnsafeMovieServiceMegogoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieServiceMegogoServer will
// result in compilation errors.
type UnsafeMovieServiceMegogoServer interface {
	mustEmbedUnimplementedMovieServiceMegogoServer()
}

func RegisterMovieServiceMegogoServer(s grpc.ServiceRegistrar, srv MovieServiceMegogoServer) {
	s.RegisterService(&MovieServiceMegogo_ServiceDesc, srv)
}

func _MovieServiceMegogo_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceMegogoServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieServiceMegogo/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceMegogoServer).Get(ctx, req.(*MovieGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieServiceMegogo_GetAllMovieByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieFilterOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceMegogoServer).GetAllMovieByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieServiceMegogo/GetAllMovieByCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceMegogoServer).GetAllMovieByCategory(ctx, req.(*MovieFilterOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieServiceMegogo_GetRelatedMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelatedMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceMegogoServer).GetRelatedMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieServiceMegogo/GetRelatedMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceMegogoServer).GetRelatedMovies(ctx, req.(*RelatedMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieServiceMegogo_GetStreams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VendorGetStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceMegogoServer).GetStreams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieServiceMegogo/GetStreams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceMegogoServer).GetStreams(ctx, req.(*VendorGetStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieServiceMegogo_Subscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VendorSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceMegogoServer).Subscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieServiceMegogo/Subscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceMegogoServer).Subscription(ctx, req.(*VendorSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieServiceMegogo_GetSeason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieSeasonGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceMegogoServer).GetSeason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieServiceMegogo/GetSeason",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceMegogoServer).GetSeason(ctx, req.(*MovieSeasonGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieServiceMegogo_GetEpisode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieEpisodeGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceMegogoServer).GetEpisode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MovieServiceMegogo/GetEpisode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceMegogoServer).GetEpisode(ctx, req.(*MovieEpisodeGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieServiceMegogo_ServiceDesc is the grpc.ServiceDesc for MovieServiceMegogo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieServiceMegogo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "content.MovieServiceMegogo",
	HandlerType: (*MovieServiceMegogoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _MovieServiceMegogo_Get_Handler,
		},
		{
			MethodName: "GetAllMovieByCategory",
			Handler:    _MovieServiceMegogo_GetAllMovieByCategory_Handler,
		},
		{
			MethodName: "GetRelatedMovies",
			Handler:    _MovieServiceMegogo_GetRelatedMovies_Handler,
		},
		{
			MethodName: "GetStreams",
			Handler:    _MovieServiceMegogo_GetStreams_Handler,
		},
		{
			MethodName: "Subscription",
			Handler:    _MovieServiceMegogo_Subscription_Handler,
		},
		{
			MethodName: "GetSeason",
			Handler:    _MovieServiceMegogo_GetSeason_Handler,
		},
		{
			MethodName: "GetEpisode",
			Handler:    _MovieServiceMegogo_GetEpisode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movie_service.proto",
}

// RecentlyWatchedClient is the client API for RecentlyWatched service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecentlyWatchedClient interface {
	Create(ctx context.Context, in *RecentlyWatchedCreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	GetUsersRecentlyWatched(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*RecentlyWatchedMoviesResponse, error)
	MarkCompleted(ctx context.Context, in *RecentlyWatchedCreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
}

type recentlyWatchedClient struct {
	cc grpc.ClientConnInterface
}

func NewRecentlyWatchedClient(cc grpc.ClientConnInterface) RecentlyWatchedClient {
	return &recentlyWatchedClient{cc}
}

func (c *recentlyWatchedClient) Create(ctx context.Context, in *RecentlyWatchedCreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/content.RecentlyWatched/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recentlyWatchedClient) GetUsersRecentlyWatched(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*RecentlyWatchedMoviesResponse, error) {
	out := new(RecentlyWatchedMoviesResponse)
	err := c.cc.Invoke(ctx, "/content.RecentlyWatched/GetUsersRecentlyWatched", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recentlyWatchedClient) MarkCompleted(ctx context.Context, in *RecentlyWatchedCreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/content.RecentlyWatched/MarkCompleted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecentlyWatchedServer is the server API for RecentlyWatched service.
// All implementations must embed UnimplementedRecentlyWatchedServer
// for forward compatibility
type RecentlyWatchedServer interface {
	Create(context.Context, *RecentlyWatchedCreateRequest) (*CreateResponse, error)
	GetUsersRecentlyWatched(context.Context, *FilterOptions) (*RecentlyWatchedMoviesResponse, error)
	MarkCompleted(context.Context, *RecentlyWatchedCreateRequest) (*CreateResponse, error)
	mustEmbedUnimplementedRecentlyWatchedServer()
}

// UnimplementedRecentlyWatchedServer must be embedded to have forward compatible implementations.
type UnimplementedRecentlyWatchedServer struct {
}

func (UnimplementedRecentlyWatchedServer) Create(context.Context, *RecentlyWatchedCreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRecentlyWatchedServer) GetUsersRecentlyWatched(context.Context, *FilterOptions) (*RecentlyWatchedMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersRecentlyWatched not implemented")
}
func (UnimplementedRecentlyWatchedServer) MarkCompleted(context.Context, *RecentlyWatchedCreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkCompleted not implemented")
}
func (UnimplementedRecentlyWatchedServer) mustEmbedUnimplementedRecentlyWatchedServer() {}

// UnsafeRecentlyWatchedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecentlyWatchedServer will
// result in compilation errors.
type UnsafeRecentlyWatchedServer interface {
	mustEmbedUnimplementedRecentlyWatchedServer()
}

func RegisterRecentlyWatchedServer(s grpc.ServiceRegistrar, srv RecentlyWatchedServer) {
	s.RegisterService(&RecentlyWatched_ServiceDesc, srv)
}

func _RecentlyWatched_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecentlyWatchedCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecentlyWatchedServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.RecentlyWatched/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecentlyWatchedServer).Create(ctx, req.(*RecentlyWatchedCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecentlyWatched_GetUsersRecentlyWatched_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecentlyWatchedServer).GetUsersRecentlyWatched(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.RecentlyWatched/GetUsersRecentlyWatched",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecentlyWatchedServer).GetUsersRecentlyWatched(ctx, req.(*FilterOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecentlyWatched_MarkCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecentlyWatchedCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecentlyWatchedServer).MarkCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.RecentlyWatched/MarkCompleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecentlyWatchedServer).MarkCompleted(ctx, req.(*RecentlyWatchedCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecentlyWatched_ServiceDesc is the grpc.ServiceDesc for RecentlyWatched service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecentlyWatched_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "content.RecentlyWatched",
	HandlerType: (*RecentlyWatchedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _RecentlyWatched_Create_Handler,
		},
		{
			MethodName: "GetUsersRecentlyWatched",
			Handler:    _RecentlyWatched_GetUsersRecentlyWatched_Handler,
		},
		{
			MethodName: "MarkCompleted",
			Handler:    _RecentlyWatched_MarkCompleted_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movie_service.proto",
}
