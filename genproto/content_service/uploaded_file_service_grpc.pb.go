// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package content_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UploadedFileServiceClient is the client API for UploadedFileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploadedFileServiceClient interface {
	Create(ctx context.Context, in *CreateUploadedFileRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetAll(ctx context.Context, in *GetAllUploadedFileRequst, opts ...grpc.CallOption) (*GetAllUploadedFileResponse, error)
	Update(ctx context.Context, in *UpdateUploadedFile, opts ...grpc.CallOption) (*empty.Empty, error)
}

type uploadedFileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadedFileServiceClient(cc grpc.ClientConnInterface) UploadedFileServiceClient {
	return &uploadedFileServiceClient{cc}
}

func (c *uploadedFileServiceClient) Create(ctx context.Context, in *CreateUploadedFileRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/content.UploadedFileService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadedFileServiceClient) GetAll(ctx context.Context, in *GetAllUploadedFileRequst, opts ...grpc.CallOption) (*GetAllUploadedFileResponse, error) {
	out := new(GetAllUploadedFileResponse)
	err := c.cc.Invoke(ctx, "/content.UploadedFileService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadedFileServiceClient) Update(ctx context.Context, in *UpdateUploadedFile, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/content.UploadedFileService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploadedFileServiceServer is the server API for UploadedFileService service.
// All implementations must embed UnimplementedUploadedFileServiceServer
// for forward compatibility
type UploadedFileServiceServer interface {
	Create(context.Context, *CreateUploadedFileRequest) (*empty.Empty, error)
	GetAll(context.Context, *GetAllUploadedFileRequst) (*GetAllUploadedFileResponse, error)
	Update(context.Context, *UpdateUploadedFile) (*empty.Empty, error)
	mustEmbedUnimplementedUploadedFileServiceServer()
}

// UnimplementedUploadedFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUploadedFileServiceServer struct {
}

func (UnimplementedUploadedFileServiceServer) Create(context.Context, *CreateUploadedFileRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUploadedFileServiceServer) GetAll(context.Context, *GetAllUploadedFileRequst) (*GetAllUploadedFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedUploadedFileServiceServer) Update(context.Context, *UpdateUploadedFile) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUploadedFileServiceServer) mustEmbedUnimplementedUploadedFileServiceServer() {}

// UnsafeUploadedFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploadedFileServiceServer will
// result in compilation errors.
type UnsafeUploadedFileServiceServer interface {
	mustEmbedUnimplementedUploadedFileServiceServer()
}

func RegisterUploadedFileServiceServer(s grpc.ServiceRegistrar, srv UploadedFileServiceServer) {
	s.RegisterService(&UploadedFileService_ServiceDesc, srv)
}

func _UploadedFileService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUploadedFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadedFileServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.UploadedFileService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadedFileServiceServer).Create(ctx, req.(*CreateUploadedFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadedFileService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUploadedFileRequst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadedFileServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.UploadedFileService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadedFileServiceServer).GetAll(ctx, req.(*GetAllUploadedFileRequst))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadedFileService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUploadedFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadedFileServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.UploadedFileService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadedFileServiceServer).Update(ctx, req.(*UpdateUploadedFile))
	}
	return interceptor(ctx, in, info, handler)
}

// UploadedFileService_ServiceDesc is the grpc.ServiceDesc for UploadedFileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploadedFileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "content.UploadedFileService",
	HandlerType: (*UploadedFileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UploadedFileService_Create_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _UploadedFileService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UploadedFileService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uploaded_file_service.proto",
}
