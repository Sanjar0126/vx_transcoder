// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package payment_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentServiceClient interface {
	AddNewCard(ctx context.Context, in *AddCardRequest, opts ...grpc.CallOption) (*CardResponse, error)
	SendCode(ctx context.Context, in *SendCodeRequest, opts ...grpc.CallOption) (*CardResponse, error)
	VerifyCard(ctx context.Context, in *VerifyCardRequest, opts ...grpc.CallOption) (*CardResponse, error)
	CardList(ctx context.Context, in *GetCardListRequest, opts ...grpc.CallOption) (*GetCardListResponse, error)
	GetCard(ctx context.Context, in *SendCodeRequest, opts ...grpc.CallOption) (*Card, error)
	RemoveCard(ctx context.Context, in *SendCodeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ReceiptCreate(ctx context.Context, in *CreateReceiptRequest, opts ...grpc.CallOption) (*Receipt, error)
	ReceiptPay(ctx context.Context, in *PayReceiptRequest, opts ...grpc.CallOption) (*Receipt, error)
	TransactionList(ctx context.Context, in *GetTransactionListRequest, opts ...grpc.CallOption) (*GetTransactionListResponse, error)
	GetAllTransactions(ctx context.Context, in *GetAllTransactionsListRequest, opts ...grpc.CallOption) (*GetAllTransactionsListResponse, error)
	HealthCheck(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) AddNewCard(ctx context.Context, in *AddCardRequest, opts ...grpc.CallOption) (*CardResponse, error) {
	out := new(CardResponse)
	err := c.cc.Invoke(ctx, "/payments.PaymentService/AddNewCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) SendCode(ctx context.Context, in *SendCodeRequest, opts ...grpc.CallOption) (*CardResponse, error) {
	out := new(CardResponse)
	err := c.cc.Invoke(ctx, "/payments.PaymentService/SendCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) VerifyCard(ctx context.Context, in *VerifyCardRequest, opts ...grpc.CallOption) (*CardResponse, error) {
	out := new(CardResponse)
	err := c.cc.Invoke(ctx, "/payments.PaymentService/VerifyCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CardList(ctx context.Context, in *GetCardListRequest, opts ...grpc.CallOption) (*GetCardListResponse, error) {
	out := new(GetCardListResponse)
	err := c.cc.Invoke(ctx, "/payments.PaymentService/CardList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetCard(ctx context.Context, in *SendCodeRequest, opts ...grpc.CallOption) (*Card, error) {
	out := new(Card)
	err := c.cc.Invoke(ctx, "/payments.PaymentService/GetCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) RemoveCard(ctx context.Context, in *SendCodeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/payments.PaymentService/RemoveCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) ReceiptCreate(ctx context.Context, in *CreateReceiptRequest, opts ...grpc.CallOption) (*Receipt, error) {
	out := new(Receipt)
	err := c.cc.Invoke(ctx, "/payments.PaymentService/ReceiptCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) ReceiptPay(ctx context.Context, in *PayReceiptRequest, opts ...grpc.CallOption) (*Receipt, error) {
	out := new(Receipt)
	err := c.cc.Invoke(ctx, "/payments.PaymentService/ReceiptPay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) TransactionList(ctx context.Context, in *GetTransactionListRequest, opts ...grpc.CallOption) (*GetTransactionListResponse, error) {
	out := new(GetTransactionListResponse)
	err := c.cc.Invoke(ctx, "/payments.PaymentService/TransactionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetAllTransactions(ctx context.Context, in *GetAllTransactionsListRequest, opts ...grpc.CallOption) (*GetAllTransactionsListResponse, error) {
	out := new(GetAllTransactionsListResponse)
	err := c.cc.Invoke(ctx, "/payments.PaymentService/GetAllTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) HealthCheck(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/payments.PaymentService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations must embed UnimplementedPaymentServiceServer
// for forward compatibility
type PaymentServiceServer interface {
	AddNewCard(context.Context, *AddCardRequest) (*CardResponse, error)
	SendCode(context.Context, *SendCodeRequest) (*CardResponse, error)
	VerifyCard(context.Context, *VerifyCardRequest) (*CardResponse, error)
	CardList(context.Context, *GetCardListRequest) (*GetCardListResponse, error)
	GetCard(context.Context, *SendCodeRequest) (*Card, error)
	RemoveCard(context.Context, *SendCodeRequest) (*empty.Empty, error)
	ReceiptCreate(context.Context, *CreateReceiptRequest) (*Receipt, error)
	ReceiptPay(context.Context, *PayReceiptRequest) (*Receipt, error)
	TransactionList(context.Context, *GetTransactionListRequest) (*GetTransactionListResponse, error)
	GetAllTransactions(context.Context, *GetAllTransactionsListRequest) (*GetAllTransactionsListResponse, error)
	HealthCheck(context.Context, *empty.Empty) (*empty.Empty, error)
	mustEmbedUnimplementedPaymentServiceServer()
}

// UnimplementedPaymentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentServiceServer struct {
}

func (UnimplementedPaymentServiceServer) AddNewCard(context.Context, *AddCardRequest) (*CardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewCard not implemented")
}
func (UnimplementedPaymentServiceServer) SendCode(context.Context, *SendCodeRequest) (*CardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCode not implemented")
}
func (UnimplementedPaymentServiceServer) VerifyCard(context.Context, *VerifyCardRequest) (*CardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCard not implemented")
}
func (UnimplementedPaymentServiceServer) CardList(context.Context, *GetCardListRequest) (*GetCardListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardList not implemented")
}
func (UnimplementedPaymentServiceServer) GetCard(context.Context, *SendCodeRequest) (*Card, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCard not implemented")
}
func (UnimplementedPaymentServiceServer) RemoveCard(context.Context, *SendCodeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCard not implemented")
}
func (UnimplementedPaymentServiceServer) ReceiptCreate(context.Context, *CreateReceiptRequest) (*Receipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiptCreate not implemented")
}
func (UnimplementedPaymentServiceServer) ReceiptPay(context.Context, *PayReceiptRequest) (*Receipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiptPay not implemented")
}
func (UnimplementedPaymentServiceServer) TransactionList(context.Context, *GetTransactionListRequest) (*GetTransactionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionList not implemented")
}
func (UnimplementedPaymentServiceServer) GetAllTransactions(context.Context, *GetAllTransactionsListRequest) (*GetAllTransactionsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTransactions not implemented")
}
func (UnimplementedPaymentServiceServer) HealthCheck(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_AddNewCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).AddNewCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payments.PaymentService/AddNewCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).AddNewCard(ctx, req.(*AddCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_SendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).SendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payments.PaymentService/SendCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).SendCode(ctx, req.(*SendCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_VerifyCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).VerifyCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payments.PaymentService/VerifyCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).VerifyCard(ctx, req.(*VerifyCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payments.PaymentService/CardList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CardList(ctx, req.(*GetCardListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payments.PaymentService/GetCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetCard(ctx, req.(*SendCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_RemoveCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).RemoveCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payments.PaymentService/RemoveCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).RemoveCard(ctx, req.(*SendCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_ReceiptCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).ReceiptCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payments.PaymentService/ReceiptCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).ReceiptCreate(ctx, req.(*CreateReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_ReceiptPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).ReceiptPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payments.PaymentService/ReceiptPay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).ReceiptPay(ctx, req.(*PayReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_TransactionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).TransactionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payments.PaymentService/TransactionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).TransactionList(ctx, req.(*GetTransactionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetAllTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTransactionsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetAllTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payments.PaymentService/GetAllTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetAllTransactions(ctx, req.(*GetAllTransactionsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payments.PaymentService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).HealthCheck(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payments.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNewCard",
			Handler:    _PaymentService_AddNewCard_Handler,
		},
		{
			MethodName: "SendCode",
			Handler:    _PaymentService_SendCode_Handler,
		},
		{
			MethodName: "VerifyCard",
			Handler:    _PaymentService_VerifyCard_Handler,
		},
		{
			MethodName: "CardList",
			Handler:    _PaymentService_CardList_Handler,
		},
		{
			MethodName: "GetCard",
			Handler:    _PaymentService_GetCard_Handler,
		},
		{
			MethodName: "RemoveCard",
			Handler:    _PaymentService_RemoveCard_Handler,
		},
		{
			MethodName: "ReceiptCreate",
			Handler:    _PaymentService_ReceiptCreate_Handler,
		},
		{
			MethodName: "ReceiptPay",
			Handler:    _PaymentService_ReceiptPay_Handler,
		},
		{
			MethodName: "TransactionList",
			Handler:    _PaymentService_TransactionList_Handler,
		},
		{
			MethodName: "GetAllTransactions",
			Handler:    _PaymentService_GetAllTransactions_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _PaymentService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment_service.proto",
}
