// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tariff_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MoviePurchaseServiceClient is the client API for MoviePurchaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoviePurchaseServiceClient interface {
	Create(ctx context.Context, in *CreateMoviePurchaseRequest, opts ...grpc.CallOption) (*CreateMoviePurchaseResponse, error)
	Update(ctx context.Context, in *UpdateMoviePurchaseRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetMoviePurchaseResponse, error)
	GetAll(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*GetAllMoviePurchaseResponse, error)
	GetUserMoviePurchases(ctx context.Context, in *GetUserMoviePurchasesRequest, opts ...grpc.CallOption) (*GetAllUserMoviePurchasesResponse, error)
	CheckMovieAccess(ctx context.Context, in *CheckAccessRequest, opts ...grpc.CallOption) (*BoolResponse, error)
}

type moviePurchaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMoviePurchaseServiceClient(cc grpc.ClientConnInterface) MoviePurchaseServiceClient {
	return &moviePurchaseServiceClient{cc}
}

func (c *moviePurchaseServiceClient) Create(ctx context.Context, in *CreateMoviePurchaseRequest, opts ...grpc.CallOption) (*CreateMoviePurchaseResponse, error) {
	out := new(CreateMoviePurchaseResponse)
	err := c.cc.Invoke(ctx, "/tariff.MoviePurchaseService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviePurchaseServiceClient) Update(ctx context.Context, in *UpdateMoviePurchaseRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tariff.MoviePurchaseService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviePurchaseServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetMoviePurchaseResponse, error) {
	out := new(GetMoviePurchaseResponse)
	err := c.cc.Invoke(ctx, "/tariff.MoviePurchaseService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviePurchaseServiceClient) GetAll(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*GetAllMoviePurchaseResponse, error) {
	out := new(GetAllMoviePurchaseResponse)
	err := c.cc.Invoke(ctx, "/tariff.MoviePurchaseService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviePurchaseServiceClient) GetUserMoviePurchases(ctx context.Context, in *GetUserMoviePurchasesRequest, opts ...grpc.CallOption) (*GetAllUserMoviePurchasesResponse, error) {
	out := new(GetAllUserMoviePurchasesResponse)
	err := c.cc.Invoke(ctx, "/tariff.MoviePurchaseService/GetUserMoviePurchases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviePurchaseServiceClient) CheckMovieAccess(ctx context.Context, in *CheckAccessRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/tariff.MoviePurchaseService/CheckMovieAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoviePurchaseServiceServer is the server API for MoviePurchaseService service.
// All implementations must embed UnimplementedMoviePurchaseServiceServer
// for forward compatibility
type MoviePurchaseServiceServer interface {
	Create(context.Context, *CreateMoviePurchaseRequest) (*CreateMoviePurchaseResponse, error)
	Update(context.Context, *UpdateMoviePurchaseRequest) (*empty.Empty, error)
	Get(context.Context, *GetRequest) (*GetMoviePurchaseResponse, error)
	GetAll(context.Context, *FilterOptions) (*GetAllMoviePurchaseResponse, error)
	GetUserMoviePurchases(context.Context, *GetUserMoviePurchasesRequest) (*GetAllUserMoviePurchasesResponse, error)
	CheckMovieAccess(context.Context, *CheckAccessRequest) (*BoolResponse, error)
	mustEmbedUnimplementedMoviePurchaseServiceServer()
}

// UnimplementedMoviePurchaseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMoviePurchaseServiceServer struct {
}

func (UnimplementedMoviePurchaseServiceServer) Create(context.Context, *CreateMoviePurchaseRequest) (*CreateMoviePurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMoviePurchaseServiceServer) Update(context.Context, *UpdateMoviePurchaseRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMoviePurchaseServiceServer) Get(context.Context, *GetRequest) (*GetMoviePurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMoviePurchaseServiceServer) GetAll(context.Context, *FilterOptions) (*GetAllMoviePurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedMoviePurchaseServiceServer) GetUserMoviePurchases(context.Context, *GetUserMoviePurchasesRequest) (*GetAllUserMoviePurchasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMoviePurchases not implemented")
}
func (UnimplementedMoviePurchaseServiceServer) CheckMovieAccess(context.Context, *CheckAccessRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMovieAccess not implemented")
}
func (UnimplementedMoviePurchaseServiceServer) mustEmbedUnimplementedMoviePurchaseServiceServer() {}

// UnsafeMoviePurchaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoviePurchaseServiceServer will
// result in compilation errors.
type UnsafeMoviePurchaseServiceServer interface {
	mustEmbedUnimplementedMoviePurchaseServiceServer()
}

func RegisterMoviePurchaseServiceServer(s grpc.ServiceRegistrar, srv MoviePurchaseServiceServer) {
	s.RegisterService(&MoviePurchaseService_ServiceDesc, srv)
}

func _MoviePurchaseService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMoviePurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviePurchaseServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tariff.MoviePurchaseService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviePurchaseServiceServer).Create(ctx, req.(*CreateMoviePurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviePurchaseService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMoviePurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviePurchaseServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tariff.MoviePurchaseService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviePurchaseServiceServer).Update(ctx, req.(*UpdateMoviePurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviePurchaseService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviePurchaseServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tariff.MoviePurchaseService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviePurchaseServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviePurchaseService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviePurchaseServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tariff.MoviePurchaseService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviePurchaseServiceServer).GetAll(ctx, req.(*FilterOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviePurchaseService_GetUserMoviePurchases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserMoviePurchasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviePurchaseServiceServer).GetUserMoviePurchases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tariff.MoviePurchaseService/GetUserMoviePurchases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviePurchaseServiceServer).GetUserMoviePurchases(ctx, req.(*GetUserMoviePurchasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviePurchaseService_CheckMovieAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviePurchaseServiceServer).CheckMovieAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tariff.MoviePurchaseService/CheckMovieAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviePurchaseServiceServer).CheckMovieAccess(ctx, req.(*CheckAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MoviePurchaseService_ServiceDesc is the grpc.ServiceDesc for MoviePurchaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MoviePurchaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tariff.MoviePurchaseService",
	HandlerType: (*MoviePurchaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _MoviePurchaseService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MoviePurchaseService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _MoviePurchaseService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _MoviePurchaseService_GetAll_Handler,
		},
		{
			MethodName: "GetUserMoviePurchases",
			Handler:    _MoviePurchaseService_GetUserMoviePurchases_Handler,
		},
		{
			MethodName: "CheckMovieAccess",
			Handler:    _MoviePurchaseService_CheckMovieAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movie_purchase_service.proto",
}
